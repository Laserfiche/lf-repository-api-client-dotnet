{
  "openapi": "3.0.1",
  "info": {
    "title": "Table public API",
    "description": "Table public API description to add.<p><strong>Build# : </strong>f7bbfad5fc44f568830871ead65ca0aa7f173aca_.20231103.9</p>",
    "version": "1"
  },
  "servers": [
    {
      "url": "https://api.a.clouddev.laserfiche.ca/table"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Home"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Tables": {
      "get": {
        "tags": [
          "Table"
        ],
        "summary": "Returns all tables.",
        "parameters": [
          {
            "name": "Prefer",
            "in": "header",
            "description": "An optional OData header. Can be used to set the maximum page size using odata.maxpagesize.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Limits the properties returned in the result.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Limits the number of items returned from a collection.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Excludes the specified number of items of the queried collection from the result.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Indicates whether the total count of items within a collection are returned in the result.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of tables.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Access token was invalid or expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Access denied for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit was reached.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Tables/{id}": {
      "get": {
        "tags": [
          "Table"
        ],
        "summary": "Returns a single table.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the table.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Limits the properties returned in the result.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single table.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableResource"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Access token was invalid or expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Access denied for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Requested table ID not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit was reached.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Tables/{id}/Rows": {
      "get": {
        "tags": [
          "Table"
        ],
        "summary": "Returns table rows for a specific table.",
        "description": "- Supported in $apply: aggregation (count, sum, average, min, max), groupby.\r\n- Supported OData function: toupper.\r\n- Supported $filter comparison operators: eq, ne, gt, ge, lt, le, in.\r\n- Supported OData logical operators: and, or, not.\r\n- Supported OData literal: null.\r\n- If $count is true, the number of rows in response will be returned.\r\n- If $orderby a column with non-unique values, the result items' order is not always the same.\r\n- Maximum value for $top is 1000.\r\n- @odata.nextlink is not supported, but pagination can be achieved by using $skip and ensuring order by $orderby unique identifier (_key).\r\n- More about OData query options: https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#_Toc31360954\r\n- More about $apply: https://docs.oasis-open.org/odata/odata-data-aggregation-ext/v4.0/cs03/odata-data-aggregation-ext-v4.0-cs03.html#SystemQueryOptionapply",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the table.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Limits the properties returned in the result.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Limits the number of items returned from a collection.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Excludes the specified number of items of the queried collection from the result.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Indicates whether the total count of items within a collection are returned in the result.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "$apply",
            "in": "query",
            "description": "Aggregation behavior is triggered using the query option $apply. It takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, e.g. the result of each transformation is the input to the next transformation.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List/Query table content.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableRowCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Access token was invalid or expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Access denied for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit was reached.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Tables/{id}/Rows/{key}": {
      "delete": {
        "tags": [
          "Table"
        ],
        "summary": "Deletes a table row by key.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the table.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "The identifier of the table row.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deletes a table row successfuly."
          },
          "400": {
            "description": "Invalid or bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Access token was invalid or expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Access denied for the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Requested table ID or row key not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit was reached.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "LookupTableColumnType": {
        "enum": [
          "Text",
          "Integer",
          "Numeric",
          "Boolean",
          "DateTime",
          "Timestamp",
          "Json"
        ],
        "type": "string"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "Resource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The identifier of the table.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of the table.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the table.",
            "nullable": true
          },
          "lastModifiedOn": {
            "type": "string",
            "description": "The last modification time of the table metadata.",
            "format": "date-time"
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The name of the user that modified the table metadata.",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "The creation time of the table.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The name of the user that created the table.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TableCollectionResponse": {
        "type": "object",
        "properties": {
          "@odata.nextLink": {
            "type": "string",
            "description": "It contains a URL that allows retrieving the next subset of the requested collection.",
            "nullable": true
          },
          "@odata.count": {
            "type": "integer",
            "description": "It contains the count of a collection of entities or a collection of entity references.",
            "format": "int32",
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Resource"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TableColumn": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the column.",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/LookupTableColumnType"
          },
          "maximumTextLength": {
            "type": "integer",
            "description": "The maximum text length for the column. Optional and only applies to Text columns.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TableResource": {
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A set of tags that can affect the table. For example, 'READONLY' to prevent the data records from being altered. Or 'DYNAMIC' to indicate that the data is available for use in LFS dynamic fields.",
            "nullable": true
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TableColumn"
            },
            "description": "The columns for the table.",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "lastModifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedBy": {
            "type": "string",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TableRow": {
        "type": "object",
        "properties": {
          "_key": {
            "type": "string",
            "description": "Unique identifier of the table row.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TableRowCollectionResponse": {
        "type": "object",
        "properties": {
          "@odata.nextLink": {
            "type": "string",
            "description": "It contains a URL that allows retrieving the next subset of the requested collection.",
            "nullable": true
          },
          "@odata.count": {
            "type": "integer",
            "description": "It contains the count of a collection of entities or a collection of entity references.",
            "format": "int32",
            "nullable": true
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TableRow"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "OAuthToken": {
        "type": "http",
        "description": "Type your token into the textbox.",
        "scheme": "bearer"
      },
      "OAuth2 Authorization Code Flow": {
        "type": "oauth2",
        "description": "<p>Note: Please enter below the clientId/clientSecret of a registered web application, or the clientId of a SPA. For SPA, the clientSecret field must be left empty. The app, either a web application or SPA, must have the following uri defined as its redirect uri.</p><p>https://api.a.clouddev.laserfiche.ca/table/swagger/oauth2-redirect.html</p><p>For more information, see <a href=\"https://developer.laserfiche.com/guides/guide_authenticating-to-the-swagger-playground.html\" target=\"_blank\">this page</a></p>",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://signin.a.clouddev.laserfiche.ca/oauth/Authorize",
            "tokenUrl": "https://signin.a.clouddev.laserfiche.ca/oauth/Token",
            "scopes": {
              "table.read": "Table read scope",
              "table.write": "Table write scope"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "OAuthToken": [
        "DemoSwaggerDifferentAuthScheme"
      ],
      "OAuth2 Authorization Code Flow": [
        "DemoSwaggerDifferentAuthScheme"
      ]
    }
  ]
}