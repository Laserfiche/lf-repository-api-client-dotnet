//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using Laserfiche.Api.Client;
using Laserfiche.Repository.Api.Client;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"

namespace Laserfiche.Table.Api.Client
{
    using System = global::System;

    [GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IHomeClient
    {

        /// <param name="parameters">Parameters for the request.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task AnonymousAsync(AnonymousParameters parameters = null, CancellationToken cancellationToken = default(CancellationToken));

    }

    [GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HomeClient : IHomeClient
    {
        private HttpClient _httpClient;
        private Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public HomeClient(HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, string url);
        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, StringBuilder urlBuilder);
        partial void ProcessResponse(HttpClient client, HttpResponseMessage response);

        /// <param name="parameters">Parameters for the request.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task AnonymousAsync(AnonymousParameters parameters = null, CancellationToken cancellationToken = default(CancellationToken))
        {

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("");

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    request_.Method = new HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    await AnonymousSendAsync(request_, client_, disposeClient_, cancellationToken);
                    return;
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task AnonymousSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    return;
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(HttpResponseMessage response, IReadOnlyDictionary<string, IEnumerable<string>> headers, CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, responseText, JsonSerializerSettings, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is Enum)
            {
                var name = Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = CustomAttributeExtensions.GetCustomAttribute(field, typeof(EnumMemberAttribute)) 
                            as EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = Convert.ToString(Convert.ChangeType(value, Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = Enumerable.OfType<object>((Array) value);
                return string.Join(",", Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Represents the request parameters for <see cref="IHomeClient.AnonymousAsync(AnonymousParameters, CancellationToken)">Anonymous</see>.
    /// </summary>
    [GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AnonymousParameters
    {
    }

    [GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface ITableClient
    {

        /// <summary>
        /// Returns all tables.
        /// </summary>
        /// <param name="parameters">Parameters for the request.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A collection of tables.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<TableCollectionResponse> TablesAsync(TablesParameters parameters = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a single table.
        /// </summary>
        /// <param name="parameters">Parameters for the request.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A single table.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<TableResource> Tables2Async(Tables2Parameters parameters, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns table rows for a specific table.
        /// </summary>
        /// <remarks>
        /// - Supported in $apply: aggregation (count, sum, average, min, max), groupby.<br/>
        /// - Supported OData function: toupper.<br/>
        /// - Supported $filter comparison operators: eq, ne, gt, ge, lt, le, in.<br/>
        /// - Supported OData logical operators: and, or, not.<br/>
        /// - Supported OData literal: null.<br/>
        /// - If $count is true, the number of rows in response will be returned.<br/>
        /// - If $orderby a column with non-unique values, the result items' order is not always the same.<br/>
        /// - Maximum value for $top is 1000.<br/>
        /// - @odata.nextlink is not supported, but pagination can be achieved by using $skip and ensuring order by $orderby unique identifier (_key).<br/>
        /// - More about OData query options: https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#_Toc31360954<br/>
        /// - More about $apply: https://docs.oasis-open.org/odata/odata-data-aggregation-ext/v4.0/cs03/odata-data-aggregation-ext-v4.0-cs03.html#SystemQueryOptionapply
        /// </remarks>
        /// <param name="parameters">Parameters for the request.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>List/Query table content.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<TableRowCollectionResponse> RowsGETAsync(RowsGETParameters parameters, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a table row by key.
        /// </summary>
        /// <param name="parameters">Parameters for the request.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Deletes a table row successfuly.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task RowsDELETEAsync(RowsDELETEParameters parameters, CancellationToken cancellationToken = default(CancellationToken));

    }

    [GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TableClient : ITableClient
    {
        private HttpClient _httpClient;
        private Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public TableClient(HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, string url);
        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, StringBuilder urlBuilder);
        partial void ProcessResponse(HttpClient client, HttpResponseMessage response);

        /// <summary>
        /// Returns all tables.
        /// </summary>
        /// <param name="parameters">Parameters for the request.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A collection of tables.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<TableCollectionResponse> TablesAsync(TablesParameters parameters = null, CancellationToken cancellationToken = default(CancellationToken))
        {

            var prefer = parameters.Prefer;
            var select = parameters.Select;
            var orderby = parameters.Orderby;
            var top = parameters.Top;
            var skip = parameters.Skip;
            var count = parameters.Count;

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Tables?");
            if (select != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$select") + "=").Append(Uri.EscapeDataString(ConvertToString(select, CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderby != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$orderby") + "=").Append(Uri.EscapeDataString(ConvertToString(orderby, CultureInfo.InvariantCulture))).Append("&");
            }
            if (top != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$top") + "=").Append(Uri.EscapeDataString(ConvertToString(top, CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$skip") + "=").Append(Uri.EscapeDataString(ConvertToString(skip, CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$count") + "=").Append(Uri.EscapeDataString(ConvertToString(count, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {

                    if (prefer != null)
                        request_.Headers.TryAddWithoutValidation("Prefer", ConvertToString(prefer, CultureInfo.InvariantCulture));
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await TablesSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<TableCollectionResponse> TablesSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<TableCollectionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Returns a single table.
        /// </summary>
        /// <param name="parameters">Parameters for the request.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A single table.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<TableResource> Tables2Async(Tables2Parameters parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (parameters == null)
                throw new ArgumentNullException("parameters");

            var id = parameters.Id;
            var select = parameters.Select;

            if (id == null)
                throw new ArgumentNullException("parameters.Id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Tables/{id}?");
            urlBuilder_.Replace("{id}", Uri.EscapeDataString(ConvertToString(id, CultureInfo.InvariantCulture)));
            if (select != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$select") + "=").Append(Uri.EscapeDataString(ConvertToString(select, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await Tables2SendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<TableResource> Tables2SendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<TableResource>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Returns table rows for a specific table.
        /// </summary>
        /// <remarks>
        /// - Supported in $apply: aggregation (count, sum, average, min, max), groupby.<br/>
        /// - Supported OData function: toupper.<br/>
        /// - Supported $filter comparison operators: eq, ne, gt, ge, lt, le, in.<br/>
        /// - Supported OData logical operators: and, or, not.<br/>
        /// - Supported OData literal: null.<br/>
        /// - If $count is true, the number of rows in response will be returned.<br/>
        /// - If $orderby a column with non-unique values, the result items' order is not always the same.<br/>
        /// - Maximum value for $top is 1000.<br/>
        /// - @odata.nextlink is not supported, but pagination can be achieved by using $skip and ensuring order by $orderby unique identifier (_key).<br/>
        /// - More about OData query options: https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#_Toc31360954<br/>
        /// - More about $apply: https://docs.oasis-open.org/odata/odata-data-aggregation-ext/v4.0/cs03/odata-data-aggregation-ext-v4.0-cs03.html#SystemQueryOptionapply
        /// </remarks>
        /// <param name="parameters">Parameters for the request.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>List/Query table content.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<TableRowCollectionResponse> RowsGETAsync(RowsGETParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (parameters == null)
                throw new ArgumentNullException("parameters");

            var id = parameters.Id;
            var select = parameters.Select;
            var filter = parameters.Filter;
            var orderby = parameters.Orderby;
            var top = parameters.Top;
            var skip = parameters.Skip;
            var count = parameters.Count;
            var apply = parameters.Apply;

            if (id == null)
                throw new ArgumentNullException("parameters.Id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Tables/{id}/Rows?");
            urlBuilder_.Replace("{id}", Uri.EscapeDataString(ConvertToString(id, CultureInfo.InvariantCulture)));
            if (select != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$select") + "=").Append(Uri.EscapeDataString(ConvertToString(select, CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$filter") + "=").Append(Uri.EscapeDataString(ConvertToString(filter, CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderby != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$orderby") + "=").Append(Uri.EscapeDataString(ConvertToString(orderby, CultureInfo.InvariantCulture))).Append("&");
            }
            if (top != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$top") + "=").Append(Uri.EscapeDataString(ConvertToString(top, CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$skip") + "=").Append(Uri.EscapeDataString(ConvertToString(skip, CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$count") + "=").Append(Uri.EscapeDataString(ConvertToString(count, CultureInfo.InvariantCulture))).Append("&");
            }
            if (apply != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$apply") + "=").Append(Uri.EscapeDataString(ConvertToString(apply, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await RowsGETSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<TableRowCollectionResponse> RowsGETSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<TableRowCollectionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Deletes a table row by key.
        /// </summary>
        /// <param name="parameters">Parameters for the request.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Deletes a table row successfuly.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task RowsDELETEAsync(RowsDELETEParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (parameters == null)
                throw new ArgumentNullException("parameters");

            var id = parameters.Id;
            var key = parameters.Key;

            if (id == null)
                throw new ArgumentNullException("parameters.Id");

            if (key == null)
                throw new ArgumentNullException("parameters.Key");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Tables/{id}/Rows/{key}");
            urlBuilder_.Replace("{id}", Uri.EscapeDataString(ConvertToString(id, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{key}", Uri.EscapeDataString(ConvertToString(key, CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    request_.Method = new HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    await RowsDELETESendAsync(request_, client_, disposeClient_, cancellationToken);
                    return;
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task RowsDELETESendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 204)
                {
                    return;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(HttpResponseMessage response, IReadOnlyDictionary<string, IEnumerable<string>> headers, CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, responseText, JsonSerializerSettings, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is Enum)
            {
                var name = Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = CustomAttributeExtensions.GetCustomAttribute(field, typeof(EnumMemberAttribute)) 
                            as EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = Convert.ToString(Convert.ChangeType(value, Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = Enumerable.OfType<object>((Array) value);
                return string.Join(",", Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Represents the request parameters for <see cref="ITableClient.TablesAsync(TablesParameters, CancellationToken)">Tables</see>.
    /// </summary>
    [GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TablesParameters
    {
        /// <summary>
        /// An optional OData header. Can be used to set the maximum page size using odata.maxpagesize.
        /// </summary>
        public string Prefer { get; set; } = null;

        /// <summary>
        /// Limits the properties returned in the result.
        /// </summary>
        public string Select { get; set; } = null;

        /// <summary>
        /// Specifies the order in which items are returned. The maximum number of expressions is 5.
        /// </summary>
        public string Orderby { get; set; } = null;

        /// <summary>
        /// Limits the number of items returned from a collection.
        /// </summary>
        public int? Top { get; set; } = null;

        /// <summary>
        /// Excludes the specified number of items of the queried collection from the result.
        /// </summary>
        public int? Skip { get; set; } = null;

        /// <summary>
        /// Indicates whether the total count of items within a collection are returned in the result.
        /// </summary>
        public bool? Count { get; set; } = null;

    }

    /// <summary>
    /// Represents the request parameters for <see cref="ITableClient.Tables2Async(Tables2Parameters, CancellationToken)">Tables2</see>.
    /// </summary>
    [GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Tables2Parameters
    {
        /// <summary>
        /// The identifier of the table.
        /// </summary>
        public Guid Id { get; set; }

        /// <summary>
        /// Limits the properties returned in the result.
        /// </summary>
        public string Select { get; set; } = null;

    }

    /// <summary>
    /// Represents the request parameters for <see cref="ITableClient.RowsGETAsync(RowsGETParameters, CancellationToken)">RowsGET</see>.
    /// </summary>
    [GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RowsGETParameters
    {
        /// <summary>
        /// The identifier of the table.
        /// </summary>
        public Guid Id { get; set; }

        /// <summary>
        /// Limits the properties returned in the result.
        /// </summary>
        public string Select { get; set; } = null;

        /// <summary>
        /// Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions.
        /// </summary>
        public string Filter { get; set; } = null;

        /// <summary>
        /// Specifies the order in which items are returned. The maximum number of expressions is 5.
        /// </summary>
        public string Orderby { get; set; } = null;

        /// <summary>
        /// Limits the number of items returned from a collection.
        /// </summary>
        public int? Top { get; set; } = null;

        /// <summary>
        /// Excludes the specified number of items of the queried collection from the result.
        /// </summary>
        public int? Skip { get; set; } = null;

        /// <summary>
        /// Indicates whether the total count of items within a collection are returned in the result.
        /// </summary>
        public bool? Count { get; set; } = null;

        /// <summary>
        /// Aggregation behavior is triggered using the query option $apply. It takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, e.g. the result of each transformation is the input to the next transformation.
        /// </summary>
        public string Apply { get; set; } = null;

    }

    /// <summary>
    /// Represents the request parameters for <see cref="ITableClient.RowsDELETEAsync(RowsDELETEParameters, CancellationToken)">RowsDELETE</see>.
    /// </summary>
    [GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RowsDELETEParameters
    {
        /// <summary>
        /// The identifier of the table.
        /// </summary>
        public Guid Id { get; set; }

        /// <summary>
        /// The identifier of the table row.
        /// </summary>
        public string Key { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum LookupTableColumnType
    {

        [EnumMember(Value = @"Text")]
        Text = 0,

        [EnumMember(Value = @"Integer")]
        Integer = 1,

        [EnumMember(Value = @"Numeric")]
        Numeric = 2,

        [EnumMember(Value = @"Boolean")]
        Boolean = 3,

        [EnumMember(Value = @"DateTime")]
        DateTime = 4,

        [EnumMember(Value = @"Timestamp")]
        Timestamp = 5,

        [EnumMember(Value = @"Json")]
        Json = 6,

    }

    [GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Resource
    {
        /// <summary>
        /// The identifier of the table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Guid Id { get; set; }

        /// <summary>
        /// The name of the table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The description of the table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The last modification time of the table metadata.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedOn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateTimeOffset LastModifiedOn { get; set; }

        /// <summary>
        /// The name of the user that modified the table metadata.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// The creation time of the table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdOn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateTimeOffset CreatedOn { get; set; }

        /// <summary>
        /// The name of the user that created the table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedBy { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TableCollectionResponse
    {
        /// <summary>
        /// It contains a URL that allows retrieving the next subset of the requested collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("@odata.nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OdataNextLink { get; set; }

        /// <summary>
        /// It contains the count of a collection of entities or a collection of entity references.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("@odata.count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OdataCount { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<Resource> Value { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TableColumn
    {
        /// <summary>
        /// The name of the column.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LookupTableColumnType Type { get; set; }

        /// <summary>
        /// The maximum text length for the column. Optional and only applies to Text columns.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maximumTextLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumTextLength { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TableResource
    {
        /// <summary>
        /// A set of tags that can affect the table. For example, 'READONLY' to prevent the data records from being altered. Or 'DYNAMIC' to indicate that the data is available for use in LFS dynamic fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<string> Tags { get; set; }

        /// <summary>
        /// The columns for the table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("columns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<TableColumn> Columns { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("lastModifiedOn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateTimeOffset LastModifiedOn { get; set; }

        [Newtonsoft.Json.JsonProperty("lastModifiedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedBy { get; set; }

        [Newtonsoft.Json.JsonProperty("createdOn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateTimeOffset CreatedOn { get; set; }

        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedBy { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TableRow
    {
        /// <summary>
        /// Unique identifier of the table row.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _key { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TableRowCollectionResponse
    {
        /// <summary>
        /// It contains a URL that allows retrieving the next subset of the requested collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("@odata.nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OdataNextLink { get; set; }

        /// <summary>
        /// It contains the count of a collection of entities or a collection of entity references.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("@odata.count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OdataCount { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<TableRow> Value { get; set; }

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604

