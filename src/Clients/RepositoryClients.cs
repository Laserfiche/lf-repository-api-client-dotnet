//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using Laserfiche.Api.Client;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Laserfiche.Repository.Api.Client
{
    using System = global::System;

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IEntriesClient
    {

        /// <summary>
        /// Creates a new document in a folder.
        /// </summary>
        /// <remarks>
        /// - Creates a new document in the specified folder with file (no more than 100 MB).<br/>
        /// - Optionally sets metadata and electronic document component.<br/>
        /// - Optional parameter: autoRename (default false). If an entry already exists with the given name, the entry will be automatically renamed. With this route, partial success is possible. The response returns multiple operation (entryCreate operation, setEdoc operation, setLinks operation, etc..) objects, which contain information about any errors that may have occurred during the creation. As long as the entryCreate operation succeeds, the entry will be created, even if all other operations fail.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="parentEntryId">The entry ID of the folder that the document will be created in.</param>
        /// <param name="fileName">The created document's file name.</param>
        /// <param name="autoRename">An optional query parameter used to indicate if the new document should be automatically<br/>
        ///             renamed if an entry already exists with the given name in the folder. The default value is false.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used.<br/>
        ///             The value should be a standard language tag. This may be used when setting field values with tokens.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Document creation is success.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<CreateEntryResult> ImportDocumentAsync(string repoId, int parentEntryId, string fileName, bool? autoRename = null, string culture = null, FileParameter electronicDocument = null, PostEntryWithEdocMetadataRequest request = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a single entry object.
        /// </summary>
        /// <remarks>
        /// - Returns a single entry object.<br/>
        /// - Provide an entry ID, and get the entry associated with that ID. Useful when detailed information about the entry is required, such as metadata, path information, etc.<br/>
        /// - Allowed OData query options: Select. If the entry is a subtype (Folder, Document, or Shortcut), the entry will automatically be converted to include those model-specific properties.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The requested entry ID.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get entry successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<Entry> GetEntryAsync(string repoId, int entryId, string select = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes an entry asynchronously.
        /// </summary>
        /// <remarks>
        /// - Begins a task to delete an entry, and returns an operationToken.<br/>
        /// - Provide an entry ID, and queue a delete task to remove it from the repository (includes nested objects if the entry is a Folder type). The entry will not be deleted immediately.<br/>
        /// - Optionally include an audit reason ID and comment in the JSON body. This route returns an operationToken, and will run as an asynchronous operation. Check the progress via the Tasks/{operationToken} route.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The requested entry ID.</param>
        /// <param name="request">The submitted audit reason.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Delete entry operation start successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<AcceptedOperation> DeleteEntryInfoAsync(string repoId, int entryId, DeleteEntryWithAuditReason request = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Moves and/or renames an entry.
        /// </summary>
        /// <remarks>
        /// - Moves and/or renames an entry.<br/>
        /// - Move and/or rename an entry by passing in the new parent folder ID or name in the JSON body.<br/>
        /// - Optional parameter: autoRename (default false). If an entry already exists with the given name, the entry will be automatically renamed.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The requested entry ID.</param>
        /// <param name="request">The request containing the folder ID that the entry will be moved to and the new name<br/>
        ///             the entry will be renamed to.</param>
        /// <param name="autoRename">An optional query parameter used to indicate if the entry should be automatically<br/>
        ///             renamed if another entry already exists with the same name in the folder. The default value is false.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used.<br/>
        ///             The value should be a standard language tag.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Moves and/or renames an entry successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<Entry> MoveOrRenameEntryAsync(string repoId, int entryId, PatchEntryRequest request = null, bool? autoRename = null, string culture = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a single entry object using the entry path.
        /// </summary>
        /// <remarks>
        /// - Returns a single entry object using the entry path.<br/>
        /// - Optional query parameter: fallbackToClosestAncestor. Use the fallbackToClosestAncestor query parameter to return the closest existing ancestor if the initial entry path is not found.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="fullPath">The requested entry path.</param>
        /// <param name="fallbackToClosestAncestor">An optional query parameter used to indicate whether or not the closest ancestor in the path should be returned if the initial entry path is not found. The default value is false.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get entry successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<FindEntryResult> GetEntryByPathAsync(string repoId, string fullPath, bool? fallbackToClosestAncestor = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the children entries of a folder.
        /// </summary>
        /// <remarks>
        /// - Returns the children entries of a folder in the repository.<br/>
        /// - Provide an entry ID (must be a folder), and get a paged listing of entries in that folder. Used as a way of navigating through the repository.<br/>
        /// - Default page size: 150. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer. OData $OrderBy syntax should follow: "PropertyName direction,PropertyName2 direction". Sort order can be either value "asc" or "desc". Optional query parameters: groupByOrderType (bool). This query parameter decides if results are returned in groups based on their entry type. Entries returned in the listing are not automatically converted to their subtype (Folder, Shortcut, Document), so clients who want model-specific information should request it via the GET entry by ID route.<br/>
        /// - Optionally returns field values for the entries in the folder. Each field name needs to be specified in the request. Maximum limit of 10 field names.<br/>
        /// - If field values are requested, only the first value is returned if it is a multi value field.<br/>
        /// - Null or Empty field values should not be used to determine if a field is assigned to the entry.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The folder ID.</param>
        /// <param name="groupByEntryType">An optional query parameter used to indicate if the result should be grouped by entry type or not.</param>
        /// <param name="fields">Optional array of field names. Field values corresponding to the given field names will be returned for each entry.</param>
        /// <param name="formatFields">Boolean for if field values should be formatted. Only applicable if Fields are specified.</param>
        /// <param name="prefer">An optional OData header. Can be used to set the maximum page size using odata.maxpagesize.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used for formatting.<br/>
        ///             The value should be a standard language tag. The formatFields query parameter must be set to true, otherwise<br/>
        ///             culture will not be used for formatting.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="top">Limits the number of items returned from a collection.</param>
        /// <param name="skip">Excludes the specified number of items of the queried collection from the result.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get the children entries of a Folder successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ODataValueContextOfIListOfEntry> GetEntryListingAsync(string repoId, int entryId, bool? groupByEntryType = null, IEnumerable<string> fields = null, bool? formatFields = null, string prefer = null, string culture = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates/copies a new child entry in a folder.
        /// </summary>
        /// <remarks>
        /// - Create/copy a new child entry in the designated folder.<br/>
        /// - Provide the parent folder ID, and based on the request body, copy or create a folder/shortcut as a child entry of the designated folder.<br/>
        /// - Optional parameter: autoRename (default false). If an entry already exists with the given name, the entry will be automatically renamed.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The folder ID that the entry will be created in.</param>
        /// <param name="request">The entry to create.</param>
        /// <param name="autoRename">An optional query parameter used to indicate if the new entry should be automatically<br/>
        ///             renamed if an entry already exists with the given name in the folder. The default value is false.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used.<br/>
        ///             The value should be a standard language tag.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created a new child entry successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<Entry> CreateOrCopyEntryAsync(string repoId, int entryId, PostEntryChildrenRequest request = null, bool? autoRename = null, string culture = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the fields assigned to an entry.
        /// </summary>
        /// <remarks>
        /// - Returns the fields assigned to an entry.<br/>
        /// - Provide an entry ID, and get a paged listing of all fields assigned to that entry.<br/>
        /// - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The requested entry ID.</param>
        /// <param name="prefer">An optional OData header. Can be used to set the maximum page size using odata.maxpagesize.</param>
        /// <param name="formatValue">An optional query parameter used to indicate if the field values should be formatted.<br/>
        ///             The default value is false.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used for formatting.<br/>
        ///             The value should be a standard language tag. The formatValue query parameter must be set to true, otherwise<br/>
        ///             culture will not be used for formatting.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="top">Limits the number of items returned from a collection.</param>
        /// <param name="skip">Excludes the specified number of items of the queried collection from the result.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get field values successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ODataValueContextOfIListOfFieldValue> GetFieldValuesAsync(string repoId, int entryId, string prefer = null, bool? formatValue = null, string culture = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates the field values assigned to an entry.
        /// </summary>
        /// <remarks>
        /// - Update the field values assigned to an entry.<br/>
        /// - Provide the new field values to assign to the entry, and remove/reset all previously assigned field values. <br/>
        /// - This is an overwrite action. The request body must include all desired field values, including any existing field values that should remain assigned to the entry. Field values that are not included in the request will be deleted from the entry. If the field value that is not included is part of a template, it will still be assigned (as required by the template), but its value will be reset.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The entry ID of the entry that will have its fields updated.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used.<br/>
        ///             The value should be a standard language tag. This may be used when setting field values with tokens.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Update field values successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ODataValueOfIListOfFieldValue> AssignFieldValuesAsync(string repoId, int entryId, IDictionary<string, FieldToUpdate> fieldsToUpdate = null, string culture = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the tags assigned to an entry.
        /// </summary>
        /// <remarks>
        /// - Returns the tags assigned to an entry.<br/>
        /// - Provide an entry ID, and get a paged listing of tags assigned to that entry.<br/>
        /// - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The requested entry ID.</param>
        /// <param name="prefer">An optional OData header. Can be used to set the maximum page size using odata.maxpagesize.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="top">Limits the number of items returned from a collection.</param>
        /// <param name="skip">Excludes the specified number of items of the queried collection from the result.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get entry tags successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ODataValueContextOfIListOfWTagInfo> GetTagsAssignedToEntryAsync(string repoId, int entryId, string prefer = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Assigns tags to an entry.
        /// </summary>
        /// <remarks>
        /// - Assign tags to an entry.<br/>
        /// - Provide an entry ID and a list of tags to assign to that entry.<br/>
        /// - This is an overwrite action. The request must include all tags to assign to the entry, including existing tags that should remain assigned to the entry.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The requested entry ID.</param>
        /// <param name="tagsToAdd">The tags to add.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Assign tags to an entry successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ODataValueOfIListOfWTagInfo> AssignTagsAsync(string repoId, int entryId, PutTagRequest tagsToAdd = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Assigns links to an entry.
        /// </summary>
        /// <remarks>
        /// - Assign links to an entry.<br/>
        /// - Provide an entry ID and a list of links to assign to that entry.<br/>
        /// - This is an overwrite action. The request must include all links to assign to the entry, including existing links that should remain assigned to the entry.
        /// </remarks>
        /// <param name="repoId">The request repository ID.</param>
        /// <param name="entryId">The requested entry ID.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Assign links to an entry successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ODataValueOfIListOfWEntryLinkInfo> AssignEntryLinksAsync(string repoId, int entryId, IEnumerable<PutLinksRequest> linksToAdd = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the links assigned to an entry.
        /// </summary>
        /// <remarks>
        /// - Returns the links assigned to an entry.<br/>
        /// - Provide an entry ID, and get a paged listing of links assigned to that entry.<br/>
        /// - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The requested entry ID.</param>
        /// <param name="prefer">An optional odata header. Can be used to set the maximum page size using odata.maxpagesize.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="top">Limits the number of items returned from a collection.</param>
        /// <param name="skip">Excludes the specified number of items of the queried collection from the result.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get links successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ODataValueContextOfIListOfWEntryLinkInfo> GetLinkValuesFromEntryAsync(string repoId, int entryId, string prefer = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Copies an entry into a folder asynchronously.
        /// </summary>
        /// <remarks>
        /// - Copy a new child entry in the designated folder async, and potentially return an operationToken.<br/>
        /// - Provide the parent folder ID, and copy an entry as a child of the designated folder.<br/>
        /// - Optional parameter: autoRename (default false). If an entry already exists with the given name, the entry will be automatically renamed. <br/>
        /// - The status of the operation can be checked via the Tasks/{operationToken} route.<br/>
        /// - Token substitution in the name of the copied entry is not supported.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The folder ID that the entry will be created in.</param>
        /// <param name="request">Copy entry request.</param>
        /// <param name="autoRename">An optional query parameter used to indicate if the new entry should be automatically<br/>
        ///             renamed if an entry already exists with the given name in the folder. The default value is false.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used.<br/>
        ///             The value should be a standard language tag.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Copy entry operation is started successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<AcceptedOperation> CopyEntryAsync(string repoId, int entryId, CopyAsyncRequest request = null, bool? autoRename = null, string culture = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the edoc associated with an entry.
        /// </summary>
        /// <remarks>
        /// - Delete the edoc associated with the provided entry ID.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The requested document ID.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Deleted edoc successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ODataValueOfBoolean> DeleteDocumentAsync(string repoId, int entryId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns information about the edoc content of an entry.
        /// </summary>
        /// <remarks>
        /// - Returns information about the edoc content of an entry, without downloading the edoc in its entirety.<br/>
        /// - Provide an entry ID, and get back the Content-Type and Content-Length in the response headers.<br/>
        /// - This route does not provide a way to download the actual edoc. Instead, it just gives metadata information about the edoc associated with the entry.<br/>
        /// - If an error occurs, the error message can be found in the X-APIServer-Error HTTP response header.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The requested document ID.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get edoc info successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<HttpResponseHead> GetDocumentContentTypeAsync(string repoId, int entryId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns an entry's edoc resource in a stream format.
        /// </summary>
        /// <remarks>
        /// - Returns an entry's edoc resource in a stream format.<br/>
        /// - Provide an entry ID, and get the edoc resource as part of the response content.<br/>
        /// - Optional header: Range. Use the Range header (single range with byte unit) to retrieve partial content of the edoc, rather than the entire edoc.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The requested document ID.</param>
        /// <param name="range">An optional header used to retrieve partial content of the edoc. Only supports single<br/>
        ///             range with byte unit.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get edoc successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<FileResponse> ExportDocumentAsync(string repoId, int entryId, string range = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the pages associated with an entry.
        /// </summary>
        /// <remarks>
        /// - Delete the pages associated with the provided entry ID. If no pageRange is specified, all pages will be deleted.<br/>
        /// - Optional parameter: pageRange (default empty). The value should be a comma-seperated string which contains non-overlapping single values, or page ranges. Ex: "1,2,3", "1-3,5", "2-7,10-12."
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The requested document ID.</param>
        /// <param name="pageRange">The pages to be deleted.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Deleted pages successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ODataValueOfBoolean> DeletePagesAsync(string repoId, int entryId, string pageRange = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns an entry's edoc resource in a stream format, including an audit reason.
        /// </summary>
        /// <remarks>
        /// - Returns an entry's edoc resource in a stream format while including an audit reason.<br/>
        /// - Provide an entry ID and audit reason/comment in the request body, and get the edoc resource as part of the response content.<br/>
        /// - Optional header: Range. Use the Range header (single range with byte unit) to retrieve partial content of the edoc, rather than the entire edoc. This route is identical to the GET edoc route, but allows clients to include an audit reason when downloading the edoc.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The requested document ID.</param>
        /// <param name="range">An optional header used to retrieve partial content of the edoc. Only supports single<br/>
        ///             range with byte unit.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get edoc successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<FileResponse> ExportDocumentWithAuditReasonAsync(string repoId, int entryId, GetEdocWithAuditReasonRequest request = null, string range = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the dynamic field logic values assigned to an entry.
        /// </summary>
        /// <remarks>
        /// - Returns dynamic field logic values with the current values of the fields in the template.<br/>
        /// - Provide an entry ID and field values in the JSON body to get dynamic field logic values.<br/>
        ///  Independent and non-dynamic fields in the request body will be ignored, and only related dynamic field logic values for the assigned template will be returned.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The requested entry ID.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get dynamic field logic values successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<IDictionary<string, ICollection<string>>> GetDynamicFieldValuesAsync(string repoId, int entryId, GetDynamicFieldLogicValueRequest request = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Removes the currently assigned template from an entry.
        /// </summary>
        /// <remarks>
        /// - Remove the currently assigned template from the specified entry.<br/>
        /// - Provide an entry ID to clear template value on.<br/>
        /// - If the entry does not have a template assigned, no change will be made.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The ID of the entry that will have its template removed.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Remove the currently assigned template successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<Entry> DeleteAssignedTemplateAsync(string repoId, int entryId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Assigns a template to an entry.
        /// </summary>
        /// <remarks>
        /// - Assign a template to an entry.<br/>
        /// - Provide an entry ID, template name, and a list of template fields to assign to that entry.<br/>
        /// - Only template values will be modified. Any existing independent fields on the entry will not be modified, nor will they be added if included in the request. The only modification to fields will only occur on templated fields. If the previously assigned template includes common template fields as the newly assigned template, the common field values will not be modified.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The ID of entry that will have its template updated.</param>
        /// <param name="request">The template and template fields that will be assigned to the entry.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used.<br/>
        ///             The value should be a standard language tag. This may be used when setting field values with tokens.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Assign a template successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<Entry> WriteTemplateValueToEntryAsync(string repoId, int entryId, PutTemplateRequest request = null, string culture = null, CancellationToken cancellationToken = default(CancellationToken));

    }

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EntriesClient : BaseClient, IEntriesClient
    {
        private HttpClient _httpClient;
        private Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public EntriesClient(HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, string url);
        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, StringBuilder urlBuilder);
        partial void ProcessResponse(HttpClient client, HttpResponseMessage response);

        /// <summary>
        /// Creates a new document in a folder.
        /// </summary>
        /// <remarks>
        /// - Creates a new document in the specified folder with file (no more than 100 MB).<br/>
        /// - Optionally sets metadata and electronic document component.<br/>
        /// - Optional parameter: autoRename (default false). If an entry already exists with the given name, the entry will be automatically renamed. With this route, partial success is possible. The response returns multiple operation (entryCreate operation, setEdoc operation, setLinks operation, etc..) objects, which contain information about any errors that may have occurred during the creation. As long as the entryCreate operation succeeds, the entry will be created, even if all other operations fail.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="parentEntryId">The entry ID of the folder that the document will be created in.</param>
        /// <param name="fileName">The created document's file name.</param>
        /// <param name="autoRename">An optional query parameter used to indicate if the new document should be automatically<br/>
        ///             renamed if an entry already exists with the given name in the folder. The default value is false.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used.<br/>
        ///             The value should be a standard language tag. This may be used when setting field values with tokens.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Document creation is success.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<CreateEntryResult> ImportDocumentAsync(string repoId, int parentEntryId, string fileName, bool? autoRename = null, string culture = null, FileParameter electronicDocument = null, PostEntryWithEdocMetadataRequest request = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (parentEntryId == null)
                throw new ArgumentNullException("parentEntryId");

            if (fileName == null)
                throw new ArgumentNullException("fileName");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Entries/{parentEntryId}/{fileName}?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{parentEntryId}", Uri.EscapeDataString(ConvertToString(parentEntryId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{fileName}", Uri.EscapeDataString(ConvertToString(fileName, CultureInfo.InvariantCulture)));
            if (autoRename != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("autoRename") + "=").Append(Uri.EscapeDataString(ConvertToString(autoRename, CultureInfo.InvariantCulture))).Append("&");
            }
            if (culture != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("culture") + "=").Append(Uri.EscapeDataString(ConvertToString(culture, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    var boundary_ = Guid.NewGuid().ToString();
                    var content_ = new MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (electronicDocument == null)
                        throw new ArgumentNullException("electronicDocument");
                    else
                    {
                        var content_electronicDocument_ = new StreamContent(electronicDocument.Data);
                        if (!string.IsNullOrEmpty(electronicDocument.ContentType))
                            content_electronicDocument_.Headers.ContentType = MediaTypeHeaderValue.Parse(electronicDocument.ContentType);
                        content_.Add(content_electronicDocument_, "electronicDocument", electronicDocument.FileName ?? "electronicDocument");
                    }

                    if (request == null)
                        throw new ArgumentNullException("request");
                    else
                    {
                        var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value);
                        content_.Add(new StringContent(json_), "request");
                    }
                    request_.Content = content_;
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await ImportDocumentSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<CreateEntryResult> ImportDocumentSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 201)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<CreateEntryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<CreateEntryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<CreateEntryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 409)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<CreateEntryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 413)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 500)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<CreateEntryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Returns a single entry object.
        /// </summary>
        /// <remarks>
        /// - Returns a single entry object.<br/>
        /// - Provide an entry ID, and get the entry associated with that ID. Useful when detailed information about the entry is required, such as metadata, path information, etc.<br/>
        /// - Allowed OData query options: Select. If the entry is a subtype (Folder, Document, or Shortcut), the entry will automatically be converted to include those model-specific properties.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The requested entry ID.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get entry successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Entry> GetEntryAsync(string repoId, int entryId, string select = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (entryId == null)
                throw new ArgumentNullException("entryId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Entries/{entryId}?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{entryId}", Uri.EscapeDataString(ConvertToString(entryId, CultureInfo.InvariantCulture)));
            if (select != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$select") + "=").Append(Uri.EscapeDataString(ConvertToString(select, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await GetEntrySendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<Entry> GetEntrySendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<Entry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Deletes an entry asynchronously.
        /// </summary>
        /// <remarks>
        /// - Begins a task to delete an entry, and returns an operationToken.<br/>
        /// - Provide an entry ID, and queue a delete task to remove it from the repository (includes nested objects if the entry is a Folder type). The entry will not be deleted immediately.<br/>
        /// - Optionally include an audit reason ID and comment in the JSON body. This route returns an operationToken, and will run as an asynchronous operation. Check the progress via the Tasks/{operationToken} route.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The requested entry ID.</param>
        /// <param name="request">The submitted audit reason.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Delete entry operation start successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<AcceptedOperation> DeleteEntryInfoAsync(string repoId, int entryId, DeleteEntryWithAuditReason request = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (entryId == null)
                throw new ArgumentNullException("entryId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Entries/{entryId}");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{entryId}", Uri.EscapeDataString(ConvertToString(entryId, CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("DELETE");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await DeleteEntryInfoSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<AcceptedOperation> DeleteEntryInfoSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 201)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<AcceptedOperation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 413)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Moves and/or renames an entry.
        /// </summary>
        /// <remarks>
        /// - Moves and/or renames an entry.<br/>
        /// - Move and/or rename an entry by passing in the new parent folder ID or name in the JSON body.<br/>
        /// - Optional parameter: autoRename (default false). If an entry already exists with the given name, the entry will be automatically renamed.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The requested entry ID.</param>
        /// <param name="request">The request containing the folder ID that the entry will be moved to and the new name<br/>
        ///             the entry will be renamed to.</param>
        /// <param name="autoRename">An optional query parameter used to indicate if the entry should be automatically<br/>
        ///             renamed if another entry already exists with the same name in the folder. The default value is false.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used.<br/>
        ///             The value should be a standard language tag.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Moves and/or renames an entry successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Entry> MoveOrRenameEntryAsync(string repoId, int entryId, PatchEntryRequest request = null, bool? autoRename = null, string culture = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (entryId == null)
                throw new ArgumentNullException("entryId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Entries/{entryId}?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{entryId}", Uri.EscapeDataString(ConvertToString(entryId, CultureInfo.InvariantCulture)));
            if (autoRename != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("autoRename") + "=").Append(Uri.EscapeDataString(ConvertToString(autoRename, CultureInfo.InvariantCulture))).Append("&");
            }
            if (culture != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("culture") + "=").Append(Uri.EscapeDataString(ConvertToString(culture, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PATCH");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await MoveOrRenameEntrySendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<Entry> MoveOrRenameEntrySendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<Entry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 409)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 413)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 423)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Returns a single entry object using the entry path.
        /// </summary>
        /// <remarks>
        /// - Returns a single entry object using the entry path.<br/>
        /// - Optional query parameter: fallbackToClosestAncestor. Use the fallbackToClosestAncestor query parameter to return the closest existing ancestor if the initial entry path is not found.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="fullPath">The requested entry path.</param>
        /// <param name="fallbackToClosestAncestor">An optional query parameter used to indicate whether or not the closest ancestor in the path should be returned if the initial entry path is not found. The default value is false.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get entry successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<FindEntryResult> GetEntryByPathAsync(string repoId, string fullPath, bool? fallbackToClosestAncestor = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Entries/ByPath?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Append(Uri.EscapeDataString("fullPath") + "=").Append(Uri.EscapeDataString(fullPath != null ? ConvertToString(fullPath, CultureInfo.InvariantCulture) : "")).Append("&");
            if (fallbackToClosestAncestor != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("fallbackToClosestAncestor") + "=").Append(Uri.EscapeDataString(ConvertToString(fallbackToClosestAncestor, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await GetEntryByPathSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<FindEntryResult> GetEntryByPathSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<FindEntryResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Returns the children entries of a folder.
        /// </summary>
        /// <remarks>
        /// - Returns the children entries of a folder in the repository.<br/>
        /// - Provide an entry ID (must be a folder), and get a paged listing of entries in that folder. Used as a way of navigating through the repository.<br/>
        /// - Default page size: 150. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer. OData $OrderBy syntax should follow: "PropertyName direction,PropertyName2 direction". Sort order can be either value "asc" or "desc". Optional query parameters: groupByOrderType (bool). This query parameter decides if results are returned in groups based on their entry type. Entries returned in the listing are not automatically converted to their subtype (Folder, Shortcut, Document), so clients who want model-specific information should request it via the GET entry by ID route.<br/>
        /// - Optionally returns field values for the entries in the folder. Each field name needs to be specified in the request. Maximum limit of 10 field names.<br/>
        /// - If field values are requested, only the first value is returned if it is a multi value field.<br/>
        /// - Null or Empty field values should not be used to determine if a field is assigned to the entry.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The folder ID.</param>
        /// <param name="groupByEntryType">An optional query parameter used to indicate if the result should be grouped by entry type or not.</param>
        /// <param name="fields">Optional array of field names. Field values corresponding to the given field names will be returned for each entry.</param>
        /// <param name="formatFields">Boolean for if field values should be formatted. Only applicable if Fields are specified.</param>
        /// <param name="prefer">An optional OData header. Can be used to set the maximum page size using odata.maxpagesize.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used for formatting.<br/>
        ///             The value should be a standard language tag. The formatFields query parameter must be set to true, otherwise<br/>
        ///             culture will not be used for formatting.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="top">Limits the number of items returned from a collection.</param>
        /// <param name="skip">Excludes the specified number of items of the queried collection from the result.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get the children entries of a Folder successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ODataValueContextOfIListOfEntry> GetEntryListingAsync(string repoId, int entryId, bool? groupByEntryType = null, IEnumerable<string> fields = null, bool? formatFields = null, string prefer = null, string culture = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (entryId == null)
                throw new ArgumentNullException("entryId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Entries/{entryId}/Laserfiche.Repository.Folder/children?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{entryId}", Uri.EscapeDataString(ConvertToString(entryId, CultureInfo.InvariantCulture)));
            if (groupByEntryType != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("groupByEntryType") + "=").Append(Uri.EscapeDataString(ConvertToString(groupByEntryType, CultureInfo.InvariantCulture))).Append("&");
            }
            if (fields != null)
            {
                foreach (var item_ in fields) { urlBuilder_.Append(Uri.EscapeDataString("fields") + "=").Append(Uri.EscapeDataString(ConvertToString(item_, CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (formatFields != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("formatFields") + "=").Append(Uri.EscapeDataString(ConvertToString(formatFields, CultureInfo.InvariantCulture))).Append("&");
            }
            if (culture != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("culture") + "=").Append(Uri.EscapeDataString(ConvertToString(culture, CultureInfo.InvariantCulture))).Append("&");
            }
            if (select != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$select") + "=").Append(Uri.EscapeDataString(ConvertToString(select, CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderby != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$orderby") + "=").Append(Uri.EscapeDataString(ConvertToString(orderby, CultureInfo.InvariantCulture))).Append("&");
            }
            if (top != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$top") + "=").Append(Uri.EscapeDataString(ConvertToString(top, CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$skip") + "=").Append(Uri.EscapeDataString(ConvertToString(skip, CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$count") + "=").Append(Uri.EscapeDataString(ConvertToString(count, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {

                    if (prefer != null)
                        request_.Headers.TryAddWithoutValidation("Prefer", ConvertToString(prefer, CultureInfo.InvariantCulture));
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await GetEntryListingSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<ODataValueContextOfIListOfEntry> GetEntryListingSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ODataValueContextOfIListOfEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Creates/copies a new child entry in a folder.
        /// </summary>
        /// <remarks>
        /// - Create/copy a new child entry in the designated folder.<br/>
        /// - Provide the parent folder ID, and based on the request body, copy or create a folder/shortcut as a child entry of the designated folder.<br/>
        /// - Optional parameter: autoRename (default false). If an entry already exists with the given name, the entry will be automatically renamed.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The folder ID that the entry will be created in.</param>
        /// <param name="request">The entry to create.</param>
        /// <param name="autoRename">An optional query parameter used to indicate if the new entry should be automatically<br/>
        ///             renamed if an entry already exists with the given name in the folder. The default value is false.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used.<br/>
        ///             The value should be a standard language tag.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Created a new child entry successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Entry> CreateOrCopyEntryAsync(string repoId, int entryId, PostEntryChildrenRequest request = null, bool? autoRename = null, string culture = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (entryId == null)
                throw new ArgumentNullException("entryId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Entries/{entryId}/Laserfiche.Repository.Folder/children?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{entryId}", Uri.EscapeDataString(ConvertToString(entryId, CultureInfo.InvariantCulture)));
            if (autoRename != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("autoRename") + "=").Append(Uri.EscapeDataString(ConvertToString(autoRename, CultureInfo.InvariantCulture))).Append("&");
            }
            if (culture != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("culture") + "=").Append(Uri.EscapeDataString(ConvertToString(culture, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await CreateOrCopyEntrySendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<Entry> CreateOrCopyEntrySendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 201)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<Entry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 409)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 413)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Returns the fields assigned to an entry.
        /// </summary>
        /// <remarks>
        /// - Returns the fields assigned to an entry.<br/>
        /// - Provide an entry ID, and get a paged listing of all fields assigned to that entry.<br/>
        /// - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The requested entry ID.</param>
        /// <param name="prefer">An optional OData header. Can be used to set the maximum page size using odata.maxpagesize.</param>
        /// <param name="formatValue">An optional query parameter used to indicate if the field values should be formatted.<br/>
        ///             The default value is false.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used for formatting.<br/>
        ///             The value should be a standard language tag. The formatValue query parameter must be set to true, otherwise<br/>
        ///             culture will not be used for formatting.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="top">Limits the number of items returned from a collection.</param>
        /// <param name="skip">Excludes the specified number of items of the queried collection from the result.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get field values successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ODataValueContextOfIListOfFieldValue> GetFieldValuesAsync(string repoId, int entryId, string prefer = null, bool? formatValue = null, string culture = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (entryId == null)
                throw new ArgumentNullException("entryId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Entries/{entryId}/fields?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{entryId}", Uri.EscapeDataString(ConvertToString(entryId, CultureInfo.InvariantCulture)));
            if (formatValue != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("formatValue") + "=").Append(Uri.EscapeDataString(ConvertToString(formatValue, CultureInfo.InvariantCulture))).Append("&");
            }
            if (culture != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("culture") + "=").Append(Uri.EscapeDataString(ConvertToString(culture, CultureInfo.InvariantCulture))).Append("&");
            }
            if (select != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$select") + "=").Append(Uri.EscapeDataString(ConvertToString(select, CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderby != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$orderby") + "=").Append(Uri.EscapeDataString(ConvertToString(orderby, CultureInfo.InvariantCulture))).Append("&");
            }
            if (top != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$top") + "=").Append(Uri.EscapeDataString(ConvertToString(top, CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$skip") + "=").Append(Uri.EscapeDataString(ConvertToString(skip, CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$count") + "=").Append(Uri.EscapeDataString(ConvertToString(count, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {

                    if (prefer != null)
                        request_.Headers.TryAddWithoutValidation("Prefer", ConvertToString(prefer, CultureInfo.InvariantCulture));
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await GetFieldValuesSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<ODataValueContextOfIListOfFieldValue> GetFieldValuesSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ODataValueContextOfIListOfFieldValue>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Updates the field values assigned to an entry.
        /// </summary>
        /// <remarks>
        /// - Update the field values assigned to an entry.<br/>
        /// - Provide the new field values to assign to the entry, and remove/reset all previously assigned field values. <br/>
        /// - This is an overwrite action. The request body must include all desired field values, including any existing field values that should remain assigned to the entry. Field values that are not included in the request will be deleted from the entry. If the field value that is not included is part of a template, it will still be assigned (as required by the template), but its value will be reset.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The entry ID of the entry that will have its fields updated.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used.<br/>
        ///             The value should be a standard language tag. This may be used when setting field values with tokens.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Update field values successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ODataValueOfIListOfFieldValue> AssignFieldValuesAsync(string repoId, int entryId, IDictionary<string, FieldToUpdate> fieldsToUpdate = null, string culture = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (entryId == null)
                throw new ArgumentNullException("entryId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Entries/{entryId}/fields?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{entryId}", Uri.EscapeDataString(ConvertToString(entryId, CultureInfo.InvariantCulture)));
            if (culture != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("culture") + "=").Append(Uri.EscapeDataString(ConvertToString(culture, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(fieldsToUpdate, _settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PUT");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await AssignFieldValuesSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<ODataValueOfIListOfFieldValue> AssignFieldValuesSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ODataValueOfIListOfFieldValue>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 413)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 423)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Returns the tags assigned to an entry.
        /// </summary>
        /// <remarks>
        /// - Returns the tags assigned to an entry.<br/>
        /// - Provide an entry ID, and get a paged listing of tags assigned to that entry.<br/>
        /// - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The requested entry ID.</param>
        /// <param name="prefer">An optional OData header. Can be used to set the maximum page size using odata.maxpagesize.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="top">Limits the number of items returned from a collection.</param>
        /// <param name="skip">Excludes the specified number of items of the queried collection from the result.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get entry tags successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ODataValueContextOfIListOfWTagInfo> GetTagsAssignedToEntryAsync(string repoId, int entryId, string prefer = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (entryId == null)
                throw new ArgumentNullException("entryId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Entries/{entryId}/tags?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{entryId}", Uri.EscapeDataString(ConvertToString(entryId, CultureInfo.InvariantCulture)));
            if (select != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$select") + "=").Append(Uri.EscapeDataString(ConvertToString(select, CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderby != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$orderby") + "=").Append(Uri.EscapeDataString(ConvertToString(orderby, CultureInfo.InvariantCulture))).Append("&");
            }
            if (top != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$top") + "=").Append(Uri.EscapeDataString(ConvertToString(top, CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$skip") + "=").Append(Uri.EscapeDataString(ConvertToString(skip, CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$count") + "=").Append(Uri.EscapeDataString(ConvertToString(count, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {

                    if (prefer != null)
                        request_.Headers.TryAddWithoutValidation("Prefer", ConvertToString(prefer, CultureInfo.InvariantCulture));
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await GetTagsAssignedToEntrySendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<ODataValueContextOfIListOfWTagInfo> GetTagsAssignedToEntrySendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ODataValueContextOfIListOfWTagInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Assigns tags to an entry.
        /// </summary>
        /// <remarks>
        /// - Assign tags to an entry.<br/>
        /// - Provide an entry ID and a list of tags to assign to that entry.<br/>
        /// - This is an overwrite action. The request must include all tags to assign to the entry, including existing tags that should remain assigned to the entry.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The requested entry ID.</param>
        /// <param name="tagsToAdd">The tags to add.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Assign tags to an entry successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ODataValueOfIListOfWTagInfo> AssignTagsAsync(string repoId, int entryId, PutTagRequest tagsToAdd = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (entryId == null)
                throw new ArgumentNullException("entryId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Entries/{entryId}/tags");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{entryId}", Uri.EscapeDataString(ConvertToString(entryId, CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(tagsToAdd, _settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PUT");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await AssignTagsSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<ODataValueOfIListOfWTagInfo> AssignTagsSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ODataValueOfIListOfWTagInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 413)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 423)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Assigns links to an entry.
        /// </summary>
        /// <remarks>
        /// - Assign links to an entry.<br/>
        /// - Provide an entry ID and a list of links to assign to that entry.<br/>
        /// - This is an overwrite action. The request must include all links to assign to the entry, including existing links that should remain assigned to the entry.
        /// </remarks>
        /// <param name="repoId">The request repository ID.</param>
        /// <param name="entryId">The requested entry ID.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Assign links to an entry successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ODataValueOfIListOfWEntryLinkInfo> AssignEntryLinksAsync(string repoId, int entryId, IEnumerable<PutLinksRequest> linksToAdd = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (entryId == null)
                throw new ArgumentNullException("entryId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Entries/{entryId}/links");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{entryId}", Uri.EscapeDataString(ConvertToString(entryId, CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(linksToAdd, _settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PUT");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await AssignEntryLinksSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<ODataValueOfIListOfWEntryLinkInfo> AssignEntryLinksSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ODataValueOfIListOfWEntryLinkInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 413)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 423)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Returns the links assigned to an entry.
        /// </summary>
        /// <remarks>
        /// - Returns the links assigned to an entry.<br/>
        /// - Provide an entry ID, and get a paged listing of links assigned to that entry.<br/>
        /// - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The requested entry ID.</param>
        /// <param name="prefer">An optional odata header. Can be used to set the maximum page size using odata.maxpagesize.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="top">Limits the number of items returned from a collection.</param>
        /// <param name="skip">Excludes the specified number of items of the queried collection from the result.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get links successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ODataValueContextOfIListOfWEntryLinkInfo> GetLinkValuesFromEntryAsync(string repoId, int entryId, string prefer = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (entryId == null)
                throw new ArgumentNullException("entryId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Entries/{entryId}/links?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{entryId}", Uri.EscapeDataString(ConvertToString(entryId, CultureInfo.InvariantCulture)));
            if (select != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$select") + "=").Append(Uri.EscapeDataString(ConvertToString(select, CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderby != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$orderby") + "=").Append(Uri.EscapeDataString(ConvertToString(orderby, CultureInfo.InvariantCulture))).Append("&");
            }
            if (top != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$top") + "=").Append(Uri.EscapeDataString(ConvertToString(top, CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$skip") + "=").Append(Uri.EscapeDataString(ConvertToString(skip, CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$count") + "=").Append(Uri.EscapeDataString(ConvertToString(count, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {

                    if (prefer != null)
                        request_.Headers.TryAddWithoutValidation("Prefer", ConvertToString(prefer, CultureInfo.InvariantCulture));
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await GetLinkValuesFromEntrySendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<ODataValueContextOfIListOfWEntryLinkInfo> GetLinkValuesFromEntrySendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ODataValueContextOfIListOfWEntryLinkInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Copies an entry into a folder asynchronously.
        /// </summary>
        /// <remarks>
        /// - Copy a new child entry in the designated folder async, and potentially return an operationToken.<br/>
        /// - Provide the parent folder ID, and copy an entry as a child of the designated folder.<br/>
        /// - Optional parameter: autoRename (default false). If an entry already exists with the given name, the entry will be automatically renamed. <br/>
        /// - The status of the operation can be checked via the Tasks/{operationToken} route.<br/>
        /// - Token substitution in the name of the copied entry is not supported.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The folder ID that the entry will be created in.</param>
        /// <param name="request">Copy entry request.</param>
        /// <param name="autoRename">An optional query parameter used to indicate if the new entry should be automatically<br/>
        ///             renamed if an entry already exists with the given name in the folder. The default value is false.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used.<br/>
        ///             The value should be a standard language tag.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Copy entry operation is started successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<AcceptedOperation> CopyEntryAsync(string repoId, int entryId, CopyAsyncRequest request = null, bool? autoRename = null, string culture = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (entryId == null)
                throw new ArgumentNullException("entryId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Entries/{entryId}/Laserfiche.Repository.Folder/CopyAsync?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{entryId}", Uri.EscapeDataString(ConvertToString(entryId, CultureInfo.InvariantCulture)));
            if (autoRename != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("autoRename") + "=").Append(Uri.EscapeDataString(ConvertToString(autoRename, CultureInfo.InvariantCulture))).Append("&");
            }
            if (culture != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("culture") + "=").Append(Uri.EscapeDataString(ConvertToString(culture, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await CopyEntrySendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<AcceptedOperation> CopyEntrySendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 201)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<AcceptedOperation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 413)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Deletes the edoc associated with an entry.
        /// </summary>
        /// <remarks>
        /// - Delete the edoc associated with the provided entry ID.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The requested document ID.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Deleted edoc successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ODataValueOfBoolean> DeleteDocumentAsync(string repoId, int entryId, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (entryId == null)
                throw new ArgumentNullException("entryId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Entries/{entryId}/Laserfiche.Repository.Document/edoc");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{entryId}", Uri.EscapeDataString(ConvertToString(entryId, CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    request_.Method = new HttpMethod("DELETE");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await DeleteDocumentSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<ODataValueOfBoolean> DeleteDocumentSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ODataValueOfBoolean>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 423)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Returns information about the edoc content of an entry.
        /// </summary>
        /// <remarks>
        /// - Returns information about the edoc content of an entry, without downloading the edoc in its entirety.<br/>
        /// - Provide an entry ID, and get back the Content-Type and Content-Length in the response headers.<br/>
        /// - This route does not provide a way to download the actual edoc. Instead, it just gives metadata information about the edoc associated with the entry.<br/>
        /// - If an error occurs, the error message can be found in the X-APIServer-Error HTTP response header.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The requested document ID.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get edoc info successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<HttpResponseHead> GetDocumentContentTypeAsync(string repoId, int entryId, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (entryId == null)
                throw new ArgumentNullException("entryId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Entries/{entryId}/Laserfiche.Repository.Document/edoc");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{entryId}", Uri.EscapeDataString(ConvertToString(entryId, CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    request_.Method = new HttpMethod("HEAD");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await GetDocumentContentTypeSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<HttpResponseHead> GetDocumentContentTypeSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    return new HttpResponseHead(status_, headers_);
                }
                else
                if (status_ == 400)
                {
                    string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseText_, JsonSerializerSettings, null);
                }
                else
                if (status_ == 401)
                {
                    string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseText_, JsonSerializerSettings, null);
                }
                else
                if (status_ == 403)
                {
                    string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseText_, JsonSerializerSettings, null);
                }
                else
                if (status_ == 404)
                {
                    string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseText_, JsonSerializerSettings, null);
                }
                else
                if (status_ == 423)
                {
                    string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseText_, JsonSerializerSettings, null);
                }
                else
                if (status_ == 429)
                {
                    string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseText_, JsonSerializerSettings, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Returns an entry's edoc resource in a stream format.
        /// </summary>
        /// <remarks>
        /// - Returns an entry's edoc resource in a stream format.<br/>
        /// - Provide an entry ID, and get the edoc resource as part of the response content.<br/>
        /// - Optional header: Range. Use the Range header (single range with byte unit) to retrieve partial content of the edoc, rather than the entire edoc.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The requested document ID.</param>
        /// <param name="range">An optional header used to retrieve partial content of the edoc. Only supports single<br/>
        ///             range with byte unit.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get edoc successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<FileResponse> ExportDocumentAsync(string repoId, int entryId, string range = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (entryId == null)
                throw new ArgumentNullException("entryId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Entries/{entryId}/Laserfiche.Repository.Document/edoc");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{entryId}", Uri.EscapeDataString(ConvertToString(entryId, CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {

                    if (range != null)
                        request_.Headers.TryAddWithoutValidation("Range", ConvertToString(range, CultureInfo.InvariantCulture));
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await ExportDocumentSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<FileResponse> ExportDocumentSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200 || status_ == 206)
                {
                    var responseStream_ = response_.Content == null ? Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                    var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                    disposeClient_[0] = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                    return fileResponse_;
                }
                else
                if (status_ == 206)
                {
                    var responseStream_ = response_.Content == null ? Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                    var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                    disposeClient_[0] = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                    return fileResponse_;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 423)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Deletes the pages associated with an entry.
        /// </summary>
        /// <remarks>
        /// - Delete the pages associated with the provided entry ID. If no pageRange is specified, all pages will be deleted.<br/>
        /// - Optional parameter: pageRange (default empty). The value should be a comma-seperated string which contains non-overlapping single values, or page ranges. Ex: "1,2,3", "1-3,5", "2-7,10-12."
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The requested document ID.</param>
        /// <param name="pageRange">The pages to be deleted.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Deleted pages successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ODataValueOfBoolean> DeletePagesAsync(string repoId, int entryId, string pageRange = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (entryId == null)
                throw new ArgumentNullException("entryId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Entries/{entryId}/Laserfiche.Repository.Document/pages?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{entryId}", Uri.EscapeDataString(ConvertToString(entryId, CultureInfo.InvariantCulture)));
            if (pageRange != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("pageRange") + "=").Append(Uri.EscapeDataString(ConvertToString(pageRange, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    request_.Method = new HttpMethod("DELETE");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await DeletePagesSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<ODataValueOfBoolean> DeletePagesSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ODataValueOfBoolean>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 423)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Returns an entry's edoc resource in a stream format, including an audit reason.
        /// </summary>
        /// <remarks>
        /// - Returns an entry's edoc resource in a stream format while including an audit reason.<br/>
        /// - Provide an entry ID and audit reason/comment in the request body, and get the edoc resource as part of the response content.<br/>
        /// - Optional header: Range. Use the Range header (single range with byte unit) to retrieve partial content of the edoc, rather than the entire edoc. This route is identical to the GET edoc route, but allows clients to include an audit reason when downloading the edoc.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The requested document ID.</param>
        /// <param name="range">An optional header used to retrieve partial content of the edoc. Only supports single<br/>
        ///             range with byte unit.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get edoc successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<FileResponse> ExportDocumentWithAuditReasonAsync(string repoId, int entryId, GetEdocWithAuditReasonRequest request = null, string range = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (entryId == null)
                throw new ArgumentNullException("entryId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Entries/{entryId}/Laserfiche.Repository.Document/GetEdocWithAuditReason");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{entryId}", Uri.EscapeDataString(ConvertToString(entryId, CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {

                    if (range != null)
                        request_.Headers.TryAddWithoutValidation("Range", ConvertToString(range, CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await ExportDocumentWithAuditReasonSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<FileResponse> ExportDocumentWithAuditReasonSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200 || status_ == 206)
                {
                    var responseStream_ = response_.Content == null ? Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                    var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                    disposeClient_[0] = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                    return fileResponse_;
                }
                else
                if (status_ == 206)
                {
                    var responseStream_ = response_.Content == null ? Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                    var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                    disposeClient_[0] = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                    return fileResponse_;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 413)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 423)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Returns the dynamic field logic values assigned to an entry.
        /// </summary>
        /// <remarks>
        /// - Returns dynamic field logic values with the current values of the fields in the template.<br/>
        /// - Provide an entry ID and field values in the JSON body to get dynamic field logic values.<br/>
        ///  Independent and non-dynamic fields in the request body will be ignored, and only related dynamic field logic values for the assigned template will be returned.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The requested entry ID.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get dynamic field logic values successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<IDictionary<string, ICollection<string>>> GetDynamicFieldValuesAsync(string repoId, int entryId, GetDynamicFieldLogicValueRequest request = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (entryId == null)
                throw new ArgumentNullException("entryId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Entries/{entryId}/fields/GetDynamicFieldLogicValue");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{entryId}", Uri.EscapeDataString(ConvertToString(entryId, CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await GetDynamicFieldValuesSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<IDictionary<string, ICollection<string>>> GetDynamicFieldValuesSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<IDictionary<string, ICollection<string>>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 413)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Removes the currently assigned template from an entry.
        /// </summary>
        /// <remarks>
        /// - Remove the currently assigned template from the specified entry.<br/>
        /// - Provide an entry ID to clear template value on.<br/>
        /// - If the entry does not have a template assigned, no change will be made.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The ID of the entry that will have its template removed.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Remove the currently assigned template successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Entry> DeleteAssignedTemplateAsync(string repoId, int entryId, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (entryId == null)
                throw new ArgumentNullException("entryId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Entries/{entryId}/template");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{entryId}", Uri.EscapeDataString(ConvertToString(entryId, CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    request_.Method = new HttpMethod("DELETE");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await DeleteAssignedTemplateSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<Entry> DeleteAssignedTemplateSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<Entry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 423)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Assigns a template to an entry.
        /// </summary>
        /// <remarks>
        /// - Assign a template to an entry.<br/>
        /// - Provide an entry ID, template name, and a list of template fields to assign to that entry.<br/>
        /// - Only template values will be modified. Any existing independent fields on the entry will not be modified, nor will they be added if included in the request. The only modification to fields will only occur on templated fields. If the previously assigned template includes common template fields as the newly assigned template, the common field values will not be modified.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="entryId">The ID of entry that will have its template updated.</param>
        /// <param name="request">The template and template fields that will be assigned to the entry.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used.<br/>
        ///             The value should be a standard language tag. This may be used when setting field values with tokens.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Assign a template successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Entry> WriteTemplateValueToEntryAsync(string repoId, int entryId, PutTemplateRequest request = null, string culture = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (entryId == null)
                throw new ArgumentNullException("entryId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Entries/{entryId}/template?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{entryId}", Uri.EscapeDataString(ConvertToString(entryId, CultureInfo.InvariantCulture)));
            if (culture != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("culture") + "=").Append(Uri.EscapeDataString(ConvertToString(culture, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PUT");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await WriteTemplateValueToEntrySendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<Entry> WriteTemplateValueToEntrySendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<Entry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 413)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 423)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(HttpResponseMessage response, IReadOnlyDictionary<string, IEnumerable<string>> headers, CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, responseText, JsonSerializerSettings, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is Enum)
            {
                var name = Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = CustomAttributeExtensions.GetCustomAttribute(field, typeof(EnumMemberAttribute)) 
                            as EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = Convert.ToString(Convert.ChangeType(value, Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = Enumerable.OfType<object>((Array) value);
                return string.Join(",", Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAttributesClient
    {

        /// <summary>
        /// Returns the attribute key value pairs associated with the authenticated user.
        /// </summary>
        /// <remarks>
        /// - Returns the attribute key value pairs associated with the authenticated user. Alternatively, return only the attribute key value pairs that are associated with the "Everyone" group.<br/>
        /// - Attribute keys can be used with subsequent calls to get specific attribute values.<br/>
        /// - Default page size: 100. Allowed OData query options: Select, Count, OrderBy, Skip, Top, SkipToken, Prefer. Optional query parameters: everyone (bool, default false). When true, this route does not return the attributes that are tied to the currently authenticated user, but rather the attributes assigned to the "Everyone" group. Note when this is true, the response does not include both the "Everyone" groups attribute and the currently authenticated user, but only the "Everyone" groups.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="everyone">Boolean value that indicates whether to return attributes key value pairs associated with everyone or the currently authenticated user.</param>
        /// <param name="prefer">An optional OData header. Can be used to set the maximum page size using odata.maxpagesize.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="top">Limits the number of items returned from a collection.</param>
        /// <param name="skip">Excludes the specified number of items of the queried collection from the result.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get trustee attribute key value pairs successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ODataValueContextOfListOfAttribute> GetTrusteeAttributeKeyValuePairsAsync(string repoId, bool? everyone = null, string prefer = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns an attribute object associated with the authenticated user.
        /// </summary>
        /// <remarks>
        /// - Returns the attribute associated with the key. Alternatively, return the attribute associated with the key within "Everyone" group.<br/>
        /// - Optional query parameters: everyone (bool, default false). When true, the server only searches for the attribute value with the given key upon the authenticated users attributes. If false, only the authenticated users attributes will be queried.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="attributeKey">The requested attribute key.</param>
        /// <param name="everyone">Boolean value that indicates whether to return attributes associated with everyone or the currently authenticated user.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get trustee attribute value successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<Attribute> GetTrusteeAttributeValueByKeyAsync(string repoId, string attributeKey, bool? everyone = null, CancellationToken cancellationToken = default(CancellationToken));

    }

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AttributesClient : BaseClient, IAttributesClient
    {
        private HttpClient _httpClient;
        private Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public AttributesClient(HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, string url);
        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, StringBuilder urlBuilder);
        partial void ProcessResponse(HttpClient client, HttpResponseMessage response);

        /// <summary>
        /// Returns the attribute key value pairs associated with the authenticated user.
        /// </summary>
        /// <remarks>
        /// - Returns the attribute key value pairs associated with the authenticated user. Alternatively, return only the attribute key value pairs that are associated with the "Everyone" group.<br/>
        /// - Attribute keys can be used with subsequent calls to get specific attribute values.<br/>
        /// - Default page size: 100. Allowed OData query options: Select, Count, OrderBy, Skip, Top, SkipToken, Prefer. Optional query parameters: everyone (bool, default false). When true, this route does not return the attributes that are tied to the currently authenticated user, but rather the attributes assigned to the "Everyone" group. Note when this is true, the response does not include both the "Everyone" groups attribute and the currently authenticated user, but only the "Everyone" groups.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="everyone">Boolean value that indicates whether to return attributes key value pairs associated with everyone or the currently authenticated user.</param>
        /// <param name="prefer">An optional OData header. Can be used to set the maximum page size using odata.maxpagesize.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="top">Limits the number of items returned from a collection.</param>
        /// <param name="skip">Excludes the specified number of items of the queried collection from the result.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get trustee attribute key value pairs successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ODataValueContextOfListOfAttribute> GetTrusteeAttributeKeyValuePairsAsync(string repoId, bool? everyone = null, string prefer = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Attributes?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            if (everyone != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("everyone") + "=").Append(Uri.EscapeDataString(ConvertToString(everyone, CultureInfo.InvariantCulture))).Append("&");
            }
            if (select != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$select") + "=").Append(Uri.EscapeDataString(ConvertToString(select, CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderby != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$orderby") + "=").Append(Uri.EscapeDataString(ConvertToString(orderby, CultureInfo.InvariantCulture))).Append("&");
            }
            if (top != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$top") + "=").Append(Uri.EscapeDataString(ConvertToString(top, CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$skip") + "=").Append(Uri.EscapeDataString(ConvertToString(skip, CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$count") + "=").Append(Uri.EscapeDataString(ConvertToString(count, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {

                    if (prefer != null)
                        request_.Headers.TryAddWithoutValidation("Prefer", ConvertToString(prefer, CultureInfo.InvariantCulture));
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await GetTrusteeAttributeKeyValuePairsSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<ODataValueContextOfListOfAttribute> GetTrusteeAttributeKeyValuePairsSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ODataValueContextOfListOfAttribute>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Returns an attribute object associated with the authenticated user.
        /// </summary>
        /// <remarks>
        /// - Returns the attribute associated with the key. Alternatively, return the attribute associated with the key within "Everyone" group.<br/>
        /// - Optional query parameters: everyone (bool, default false). When true, the server only searches for the attribute value with the given key upon the authenticated users attributes. If false, only the authenticated users attributes will be queried.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="attributeKey">The requested attribute key.</param>
        /// <param name="everyone">Boolean value that indicates whether to return attributes associated with everyone or the currently authenticated user.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get trustee attribute value successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Attribute> GetTrusteeAttributeValueByKeyAsync(string repoId, string attributeKey, bool? everyone = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (attributeKey == null)
                throw new ArgumentNullException("attributeKey");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Attributes/{attributeKey}?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{attributeKey}", Uri.EscapeDataString(ConvertToString(attributeKey, CultureInfo.InvariantCulture)));
            if (everyone != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("everyone") + "=").Append(Uri.EscapeDataString(ConvertToString(everyone, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await GetTrusteeAttributeValueByKeySendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<Attribute> GetTrusteeAttributeValueByKeySendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<Attribute>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(HttpResponseMessage response, IReadOnlyDictionary<string, IEnumerable<string>> headers, CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, responseText, JsonSerializerSettings, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is Enum)
            {
                var name = Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = CustomAttributeExtensions.GetCustomAttribute(field, typeof(EnumMemberAttribute)) 
                            as EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = Convert.ToString(Convert.ChangeType(value, Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = Enumerable.OfType<object>((Array) value);
                return string.Join(",", Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IFieldDefinitionsClient
    {

        /// <summary>
        /// Returns a single field definition object.
        /// </summary>
        /// <remarks>
        /// - Returns a single field definition associated with the specified ID. <br/>
        /// - Useful when a route provides a minimal amount of details and more information about the specific field definition is needed.<br/>
        /// - Allowed OData query options: Select
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="fieldDefinitionId">The requested field definition ID.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used for formatting.<br/>
        ///             The value should be a standard language tag.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get field definition successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<WFieldInfo> GetFieldDefinitionByIdAsync(string repoId, int fieldDefinitionId, string culture = null, string select = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the paged listing of the field definitions available in a repository.
        /// </summary>
        /// <remarks>
        /// - Returns a paged listing of field definitions available in the specified repository.<br/>
        /// - Useful when trying to find a list of all field definitions available, rather than only those assigned to a specific entry/template.<br/>
        /// - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="prefer">An optional OData header. Can be used to set the maximum page size using odata.maxpagesize.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used for formatting.<br/>
        ///             The value should be a standard language tag.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="top">Limits the number of items returned from a collection.</param>
        /// <param name="skip">Excludes the specified number of items of the queried collection from the result.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get field definitions successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ODataValueContextOfIListOfWFieldInfo> GetFieldDefinitionsAsync(string repoId, string prefer = null, string culture = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null, CancellationToken cancellationToken = default(CancellationToken));

    }

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldDefinitionsClient : BaseClient, IFieldDefinitionsClient
    {
        private HttpClient _httpClient;
        private Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public FieldDefinitionsClient(HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, string url);
        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, StringBuilder urlBuilder);
        partial void ProcessResponse(HttpClient client, HttpResponseMessage response);

        /// <summary>
        /// Returns a single field definition object.
        /// </summary>
        /// <remarks>
        /// - Returns a single field definition associated with the specified ID. <br/>
        /// - Useful when a route provides a minimal amount of details and more information about the specific field definition is needed.<br/>
        /// - Allowed OData query options: Select
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="fieldDefinitionId">The requested field definition ID.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used for formatting.<br/>
        ///             The value should be a standard language tag.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get field definition successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<WFieldInfo> GetFieldDefinitionByIdAsync(string repoId, int fieldDefinitionId, string culture = null, string select = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (fieldDefinitionId == null)
                throw new ArgumentNullException("fieldDefinitionId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/FieldDefinitions/{fieldDefinitionId}?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{fieldDefinitionId}", Uri.EscapeDataString(ConvertToString(fieldDefinitionId, CultureInfo.InvariantCulture)));
            if (culture != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("culture") + "=").Append(Uri.EscapeDataString(ConvertToString(culture, CultureInfo.InvariantCulture))).Append("&");
            }
            if (select != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$select") + "=").Append(Uri.EscapeDataString(ConvertToString(select, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await GetFieldDefinitionByIdSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<WFieldInfo> GetFieldDefinitionByIdSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<WFieldInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Returns the paged listing of the field definitions available in a repository.
        /// </summary>
        /// <remarks>
        /// - Returns a paged listing of field definitions available in the specified repository.<br/>
        /// - Useful when trying to find a list of all field definitions available, rather than only those assigned to a specific entry/template.<br/>
        /// - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="prefer">An optional OData header. Can be used to set the maximum page size using odata.maxpagesize.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used for formatting.<br/>
        ///             The value should be a standard language tag.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="top">Limits the number of items returned from a collection.</param>
        /// <param name="skip">Excludes the specified number of items of the queried collection from the result.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get field definitions successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ODataValueContextOfIListOfWFieldInfo> GetFieldDefinitionsAsync(string repoId, string prefer = null, string culture = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/FieldDefinitions?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            if (culture != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("culture") + "=").Append(Uri.EscapeDataString(ConvertToString(culture, CultureInfo.InvariantCulture))).Append("&");
            }
            if (select != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$select") + "=").Append(Uri.EscapeDataString(ConvertToString(select, CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderby != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$orderby") + "=").Append(Uri.EscapeDataString(ConvertToString(orderby, CultureInfo.InvariantCulture))).Append("&");
            }
            if (top != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$top") + "=").Append(Uri.EscapeDataString(ConvertToString(top, CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$skip") + "=").Append(Uri.EscapeDataString(ConvertToString(skip, CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$count") + "=").Append(Uri.EscapeDataString(ConvertToString(count, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {

                    if (prefer != null)
                        request_.Headers.TryAddWithoutValidation("Prefer", ConvertToString(prefer, CultureInfo.InvariantCulture));
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await GetFieldDefinitionsSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<ODataValueContextOfIListOfWFieldInfo> GetFieldDefinitionsSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ODataValueContextOfIListOfWFieldInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(HttpResponseMessage response, IReadOnlyDictionary<string, IEnumerable<string>> headers, CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, responseText, JsonSerializerSettings, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is Enum)
            {
                var name = Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = CustomAttributeExtensions.GetCustomAttribute(field, typeof(EnumMemberAttribute)) 
                            as EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = Convert.ToString(Convert.ChangeType(value, Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = Enumerable.OfType<object>((Array) value);
                return string.Join(",", Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ILinkDefinitionsClient
    {

        /// <summary>
        /// Returns the link definitions associated with a repository.
        /// </summary>
        /// <remarks>
        /// - Returns the link definitions in the repository.<br/>
        /// - Provide a repository ID and get a paged listing of link definitions available in the repository. Useful when trying to display all link definitions available, not only links assigned to a specific entry.<br/>
        /// - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="prefer">An optional OData header. Can be used to set the maximum page size using odata.maxpagesize.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="top">Limits the number of items returned from a collection.</param>
        /// <param name="skip">Excludes the specified number of items of the queried collection from the result.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get link definitions successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ODataValueContextOfIListOfEntryLinkTypeInfo> GetLinkDefinitionsAsync(string repoId, string prefer = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a single link definition object.
        /// </summary>
        /// <remarks>
        /// - Returns a single link definition associated with the specified ID.<br/>
        /// - Provide a link type ID and get the associated link definition. Useful when a route provides a minimal amount of details and more information about the specific link definition is needed.<br/>
        /// - Allowed OData query options: Select
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="linkTypeId">The requested link type ID.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get link definition successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<EntryLinkTypeInfo> GetLinkDefinitionByIdAsync(string repoId, int linkTypeId, string select = null, CancellationToken cancellationToken = default(CancellationToken));

    }

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LinkDefinitionsClient : BaseClient, ILinkDefinitionsClient
    {
        private HttpClient _httpClient;
        private Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public LinkDefinitionsClient(HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, string url);
        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, StringBuilder urlBuilder);
        partial void ProcessResponse(HttpClient client, HttpResponseMessage response);

        /// <summary>
        /// Returns the link definitions associated with a repository.
        /// </summary>
        /// <remarks>
        /// - Returns the link definitions in the repository.<br/>
        /// - Provide a repository ID and get a paged listing of link definitions available in the repository. Useful when trying to display all link definitions available, not only links assigned to a specific entry.<br/>
        /// - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="prefer">An optional OData header. Can be used to set the maximum page size using odata.maxpagesize.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="top">Limits the number of items returned from a collection.</param>
        /// <param name="skip">Excludes the specified number of items of the queried collection from the result.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get link definitions successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ODataValueContextOfIListOfEntryLinkTypeInfo> GetLinkDefinitionsAsync(string repoId, string prefer = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/LinkDefinitions?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            if (select != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$select") + "=").Append(Uri.EscapeDataString(ConvertToString(select, CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderby != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$orderby") + "=").Append(Uri.EscapeDataString(ConvertToString(orderby, CultureInfo.InvariantCulture))).Append("&");
            }
            if (top != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$top") + "=").Append(Uri.EscapeDataString(ConvertToString(top, CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$skip") + "=").Append(Uri.EscapeDataString(ConvertToString(skip, CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$count") + "=").Append(Uri.EscapeDataString(ConvertToString(count, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {

                    if (prefer != null)
                        request_.Headers.TryAddWithoutValidation("Prefer", ConvertToString(prefer, CultureInfo.InvariantCulture));
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await GetLinkDefinitionsSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<ODataValueContextOfIListOfEntryLinkTypeInfo> GetLinkDefinitionsSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ODataValueContextOfIListOfEntryLinkTypeInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Returns a single link definition object.
        /// </summary>
        /// <remarks>
        /// - Returns a single link definition associated with the specified ID.<br/>
        /// - Provide a link type ID and get the associated link definition. Useful when a route provides a minimal amount of details and more information about the specific link definition is needed.<br/>
        /// - Allowed OData query options: Select
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="linkTypeId">The requested link type ID.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get link definition successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<EntryLinkTypeInfo> GetLinkDefinitionByIdAsync(string repoId, int linkTypeId, string select = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (linkTypeId == null)
                throw new ArgumentNullException("linkTypeId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/LinkDefinitions/{linkTypeId}?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{linkTypeId}", Uri.EscapeDataString(ConvertToString(linkTypeId, CultureInfo.InvariantCulture)));
            if (select != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$select") + "=").Append(Uri.EscapeDataString(ConvertToString(select, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await GetLinkDefinitionByIdSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<EntryLinkTypeInfo> GetLinkDefinitionByIdSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<EntryLinkTypeInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(HttpResponseMessage response, IReadOnlyDictionary<string, IEnumerable<string>> headers, CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, responseText, JsonSerializerSettings, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is Enum)
            {
                var name = Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = CustomAttributeExtensions.GetCustomAttribute(field, typeof(EnumMemberAttribute)) 
                            as EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = Convert.ToString(Convert.ChangeType(value, Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = Enumerable.OfType<object>((Array) value);
                return string.Join(",", Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IRepositoriesClient
    {

        /// <summary>
        /// Returns the list of repositories accessible to the user.
        /// </summary>
        /// <remarks>
        /// - Returns the repository resource list that current user has access to.
        /// </remarks>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get the respository resource list successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ICollection<RepositoryInfo>> GetRepositoryListAsync(CancellationToken cancellationToken = default(CancellationToken));

    }

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RepositoriesClient : BaseClient, IRepositoriesClient
    {
        private HttpClient _httpClient;
        private Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public RepositoriesClient(HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, string url);
        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, StringBuilder urlBuilder);
        partial void ProcessResponse(HttpClient client, HttpResponseMessage response);

        /// <summary>
        /// Returns the list of repositories accessible to the user.
        /// </summary>
        /// <remarks>
        /// - Returns the repository resource list that current user has access to.
        /// </remarks>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get the respository resource list successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ICollection<RepositoryInfo>> GetRepositoryListAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories");

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await GetRepositoryListSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<ICollection<RepositoryInfo>> GetRepositoryListSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ICollection<RepositoryInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(HttpResponseMessage response, IReadOnlyDictionary<string, IEnumerable<string>> headers, CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, responseText, JsonSerializerSettings, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is Enum)
            {
                var name = Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = CustomAttributeExtensions.GetCustomAttribute(field, typeof(EnumMemberAttribute)) 
                            as EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = Convert.ToString(Convert.ChangeType(value, Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = Enumerable.OfType<object>((Array) value);
                return string.Join(",", Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAuditReasonsClient
    {

        /// <summary>
        /// Returns the audit reasons associated with the authenticated user.
        /// </summary>
        /// <remarks>
        /// - Returns the audit reasons associated with the authenticated user. Inherited audit reasons are included.<br/>
        /// - Only includes audit reasons associated with available API functionalities, like delete entry and export document.<br/>
        /// - If the authenticated user does not have the appropriate Laserfiche feature right, the audit reasons associated with that feature right will not be included.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get audit reasons successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<AuditReasons> GetAuditReasonsAsync(string repoId, CancellationToken cancellationToken = default(CancellationToken));

    }

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuditReasonsClient : BaseClient, IAuditReasonsClient
    {
        private HttpClient _httpClient;
        private Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public AuditReasonsClient(HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, string url);
        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, StringBuilder urlBuilder);
        partial void ProcessResponse(HttpClient client, HttpResponseMessage response);

        /// <summary>
        /// Returns the audit reasons associated with the authenticated user.
        /// </summary>
        /// <remarks>
        /// - Returns the audit reasons associated with the authenticated user. Inherited audit reasons are included.<br/>
        /// - Only includes audit reasons associated with available API functionalities, like delete entry and export document.<br/>
        /// - If the authenticated user does not have the appropriate Laserfiche feature right, the audit reasons associated with that feature right will not be included.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get audit reasons successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<AuditReasons> GetAuditReasonsAsync(string repoId, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/AuditReasons");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await GetAuditReasonsSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<AuditReasons> GetAuditReasonsSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<AuditReasons>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(HttpResponseMessage response, IReadOnlyDictionary<string, IEnumerable<string>> headers, CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, responseText, JsonSerializerSettings, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is Enum)
            {
                var name = Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = CustomAttributeExtensions.GetCustomAttribute(field, typeof(EnumMemberAttribute)) 
                            as EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = Convert.ToString(Convert.ChangeType(value, Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = Enumerable.OfType<object>((Array) value);
                return string.Join(",", Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ISearchesClient
    {

        /// <summary>
        /// Runs a search in the specified repository.
        /// </summary>
        /// <remarks>
        /// - Runs a search operation on the repository.<br/>
        /// - Optional body parameters: FuzzyType: (default none), which can be used to determine what is considered a match by number of letters or percentage. FuzzyFactor: integer value that determines the degree to which a search will be considered a match (integer value for NumberOfLetters, or int value representing a percentage). The status for search operations must be checked via the Search specific status checking route.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="request">The Laserfiche search command to run, optionally include fuzzy search settings.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Search operation start successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<AcceptedOperation> CreateSearchOperationAsync(string repoId, AdvancedSearchRequest request = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the status of a search operation.
        /// </summary>
        /// <remarks>
        /// - Returns search status.<br/>
        /// - Provide a token (returned in the create search asynchronous route), and get the search status, progress, and any errors that may have occurred. When the search is completed, the Location header can be inspected as a link to the search results.<br/>
        /// - OperationStatus can be one of the following : NotStarted, InProgress, Completed, Failed, or Canceled.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="searchToken">The requested searchToken.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Search has failed. Check the errors property to find out why.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<OperationProgress> GetSearchStatusAsync(string repoId, string searchToken, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancels or closes a search operation.
        /// </summary>
        /// <remarks>
        /// - Cancels a currently running search.<br/>
        /// - Closes a completed search.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="searchToken">The requested searchToken.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Cancel or closed search successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ODataValueOfBoolean> CancelOrCloseSearchAsync(string repoId, string searchToken, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the results listing associated with a search operation.
        /// </summary>
        /// <remarks>
        /// - Returns a search result listing if the search is completed.<br/>
        /// - Optional query parameter: groupByOrderType (default false). This query parameter decides whether or not results are returned in groups based on their entry type.<br/>
        /// - Optional query parameter: refresh (default false). If the search listing should be refreshed to show updated values.<br/>
        /// - Default page size: 150. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer. OData $OrderBy syntax should follow: "PropertyName direction,PropertyName2 direction". sort order can be either "asc" or "desc". Search results expire after 5 minutes, but can be refreshed by retrieving the results again.<br/>
        /// - Optionally returns field values for the entries in the search result listing. Each field name needs to be specified in the request. Maximum limit of 10 field names.<br/>
        /// - If field values are requested, only the first value is returned if it is a multi value field.<br/>
        /// - Null or Empty field values should not be used to determine if a field is assigned to the entry.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="searchToken">The requested searchToken.</param>
        /// <param name="groupByEntryType">An optional query parameter used to indicate if the result should be grouped by entry type or not.</param>
        /// <param name="refresh">If the search listing should be refreshed to show updated values.</param>
        /// <param name="fields">Optional array of field names. Field values corresponding to the given field names will be returned for each search result.</param>
        /// <param name="formatFields">Boolean for if field values should be formatted. Only applicable if Fields are specified.</param>
        /// <param name="prefer">An optional odata header. Can be used to set the maximum page size using odata.maxpagesize.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used for formatting.<br/>
        ///             The value should be a standard language tag. The formatFields query parameter must be set to true, otherwise<br/>
        ///             culture will not be used for formatting.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="top">Limits the number of items returned from a collection.</param>
        /// <param name="skip">Excludes the specified number of items of the queried collection from the result.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get search result successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ODataValueContextOfIListOfEntry> GetSearchResultsAsync(string repoId, string searchToken, bool? groupByEntryType = null, bool? refresh = null, IEnumerable<string> fields = null, bool? formatFields = null, string prefer = null, string culture = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the context hits associated with a search result entry.
        /// </summary>
        /// <remarks>
        /// - Returns the context hits associated with a search result entry.<br/>
        /// - Given a searchToken, and rowNumber associated with a search entry in the listing, return the context hits for that entry.<br/>
        /// - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="searchToken">The requested searchToken.</param>
        /// <param name="rowNumber">The search result listing row number to get context hits for.</param>
        /// <param name="prefer">An optional OData header. Can be used to set the maximum page size using odata.maxpagesize.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="top">Limits the number of items returned from a collection.</param>
        /// <param name="skip">Excludes the specified number of items of the queried collection from the result.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get search context hits successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ODataValueContextOfIListOfContextHit> GetSearchContextHitsAsync(string repoId, string searchToken, int rowNumber, string prefer = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null, CancellationToken cancellationToken = default(CancellationToken));

    }

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchesClient : BaseClient, ISearchesClient
    {
        private HttpClient _httpClient;
        private Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public SearchesClient(HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, string url);
        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, StringBuilder urlBuilder);
        partial void ProcessResponse(HttpClient client, HttpResponseMessage response);

        /// <summary>
        /// Runs a search in the specified repository.
        /// </summary>
        /// <remarks>
        /// - Runs a search operation on the repository.<br/>
        /// - Optional body parameters: FuzzyType: (default none), which can be used to determine what is considered a match by number of letters or percentage. FuzzyFactor: integer value that determines the degree to which a search will be considered a match (integer value for NumberOfLetters, or int value representing a percentage). The status for search operations must be checked via the Search specific status checking route.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="request">The Laserfiche search command to run, optionally include fuzzy search settings.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Search operation start successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<AcceptedOperation> CreateSearchOperationAsync(string repoId, AdvancedSearchRequest request = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Searches");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await CreateSearchOperationSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<AcceptedOperation> CreateSearchOperationSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 201)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<AcceptedOperation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 413)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Returns the status of a search operation.
        /// </summary>
        /// <remarks>
        /// - Returns search status.<br/>
        /// - Provide a token (returned in the create search asynchronous route), and get the search status, progress, and any errors that may have occurred. When the search is completed, the Location header can be inspected as a link to the search results.<br/>
        /// - OperationStatus can be one of the following : NotStarted, InProgress, Completed, Failed, or Canceled.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="searchToken">The requested searchToken.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Search has failed. Check the errors property to find out why.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<OperationProgress> GetSearchStatusAsync(string repoId, string searchToken, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (searchToken == null)
                throw new ArgumentNullException("searchToken");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Searches/{searchToken}");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{searchToken}", Uri.EscapeDataString(ConvertToString(searchToken, CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await GetSearchStatusSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<OperationProgress> GetSearchStatusSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<OperationProgress>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 201)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<OperationProgress>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 202)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<OperationProgress>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Cancels or closes a search operation.
        /// </summary>
        /// <remarks>
        /// - Cancels a currently running search.<br/>
        /// - Closes a completed search.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="searchToken">The requested searchToken.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Cancel or closed search successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ODataValueOfBoolean> CancelOrCloseSearchAsync(string repoId, string searchToken, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (searchToken == null)
                throw new ArgumentNullException("searchToken");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Searches/{searchToken}");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{searchToken}", Uri.EscapeDataString(ConvertToString(searchToken, CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    request_.Method = new HttpMethod("DELETE");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await CancelOrCloseSearchSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<ODataValueOfBoolean> CancelOrCloseSearchSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ODataValueOfBoolean>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Returns the results listing associated with a search operation.
        /// </summary>
        /// <remarks>
        /// - Returns a search result listing if the search is completed.<br/>
        /// - Optional query parameter: groupByOrderType (default false). This query parameter decides whether or not results are returned in groups based on their entry type.<br/>
        /// - Optional query parameter: refresh (default false). If the search listing should be refreshed to show updated values.<br/>
        /// - Default page size: 150. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer. OData $OrderBy syntax should follow: "PropertyName direction,PropertyName2 direction". sort order can be either "asc" or "desc". Search results expire after 5 minutes, but can be refreshed by retrieving the results again.<br/>
        /// - Optionally returns field values for the entries in the search result listing. Each field name needs to be specified in the request. Maximum limit of 10 field names.<br/>
        /// - If field values are requested, only the first value is returned if it is a multi value field.<br/>
        /// - Null or Empty field values should not be used to determine if a field is assigned to the entry.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="searchToken">The requested searchToken.</param>
        /// <param name="groupByEntryType">An optional query parameter used to indicate if the result should be grouped by entry type or not.</param>
        /// <param name="refresh">If the search listing should be refreshed to show updated values.</param>
        /// <param name="fields">Optional array of field names. Field values corresponding to the given field names will be returned for each search result.</param>
        /// <param name="formatFields">Boolean for if field values should be formatted. Only applicable if Fields are specified.</param>
        /// <param name="prefer">An optional odata header. Can be used to set the maximum page size using odata.maxpagesize.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used for formatting.<br/>
        ///             The value should be a standard language tag. The formatFields query parameter must be set to true, otherwise<br/>
        ///             culture will not be used for formatting.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="top">Limits the number of items returned from a collection.</param>
        /// <param name="skip">Excludes the specified number of items of the queried collection from the result.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get search result successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ODataValueContextOfIListOfEntry> GetSearchResultsAsync(string repoId, string searchToken, bool? groupByEntryType = null, bool? refresh = null, IEnumerable<string> fields = null, bool? formatFields = null, string prefer = null, string culture = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (searchToken == null)
                throw new ArgumentNullException("searchToken");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Searches/{searchToken}/Results?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{searchToken}", Uri.EscapeDataString(ConvertToString(searchToken, CultureInfo.InvariantCulture)));
            if (groupByEntryType != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("groupByEntryType") + "=").Append(Uri.EscapeDataString(ConvertToString(groupByEntryType, CultureInfo.InvariantCulture))).Append("&");
            }
            if (refresh != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("refresh") + "=").Append(Uri.EscapeDataString(ConvertToString(refresh, CultureInfo.InvariantCulture))).Append("&");
            }
            if (fields != null)
            {
                foreach (var item_ in fields) { urlBuilder_.Append(Uri.EscapeDataString("fields") + "=").Append(Uri.EscapeDataString(ConvertToString(item_, CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (formatFields != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("formatFields") + "=").Append(Uri.EscapeDataString(ConvertToString(formatFields, CultureInfo.InvariantCulture))).Append("&");
            }
            if (culture != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("culture") + "=").Append(Uri.EscapeDataString(ConvertToString(culture, CultureInfo.InvariantCulture))).Append("&");
            }
            if (select != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$select") + "=").Append(Uri.EscapeDataString(ConvertToString(select, CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderby != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$orderby") + "=").Append(Uri.EscapeDataString(ConvertToString(orderby, CultureInfo.InvariantCulture))).Append("&");
            }
            if (top != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$top") + "=").Append(Uri.EscapeDataString(ConvertToString(top, CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$skip") + "=").Append(Uri.EscapeDataString(ConvertToString(skip, CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$count") + "=").Append(Uri.EscapeDataString(ConvertToString(count, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {

                    if (prefer != null)
                        request_.Headers.TryAddWithoutValidation("Prefer", ConvertToString(prefer, CultureInfo.InvariantCulture));
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await GetSearchResultsSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<ODataValueContextOfIListOfEntry> GetSearchResultsSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ODataValueContextOfIListOfEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Returns the context hits associated with a search result entry.
        /// </summary>
        /// <remarks>
        /// - Returns the context hits associated with a search result entry.<br/>
        /// - Given a searchToken, and rowNumber associated with a search entry in the listing, return the context hits for that entry.<br/>
        /// - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="searchToken">The requested searchToken.</param>
        /// <param name="rowNumber">The search result listing row number to get context hits for.</param>
        /// <param name="prefer">An optional OData header. Can be used to set the maximum page size using odata.maxpagesize.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="top">Limits the number of items returned from a collection.</param>
        /// <param name="skip">Excludes the specified number of items of the queried collection from the result.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get search context hits successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ODataValueContextOfIListOfContextHit> GetSearchContextHitsAsync(string repoId, string searchToken, int rowNumber, string prefer = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (searchToken == null)
                throw new ArgumentNullException("searchToken");

            if (rowNumber == null)
                throw new ArgumentNullException("rowNumber");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Searches/{searchToken}/Results/{rowNumber}/ContextHits?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{searchToken}", Uri.EscapeDataString(ConvertToString(searchToken, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{rowNumber}", Uri.EscapeDataString(ConvertToString(rowNumber, CultureInfo.InvariantCulture)));
            if (select != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$select") + "=").Append(Uri.EscapeDataString(ConvertToString(select, CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderby != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$orderby") + "=").Append(Uri.EscapeDataString(ConvertToString(orderby, CultureInfo.InvariantCulture))).Append("&");
            }
            if (top != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$top") + "=").Append(Uri.EscapeDataString(ConvertToString(top, CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$skip") + "=").Append(Uri.EscapeDataString(ConvertToString(skip, CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$count") + "=").Append(Uri.EscapeDataString(ConvertToString(count, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {

                    if (prefer != null)
                        request_.Headers.TryAddWithoutValidation("Prefer", ConvertToString(prefer, CultureInfo.InvariantCulture));
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await GetSearchContextHitsSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<ODataValueContextOfIListOfContextHit> GetSearchContextHitsSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ODataValueContextOfIListOfContextHit>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(HttpResponseMessage response, IReadOnlyDictionary<string, IEnumerable<string>> headers, CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, responseText, JsonSerializerSettings, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is Enum)
            {
                var name = Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = CustomAttributeExtensions.GetCustomAttribute(field, typeof(EnumMemberAttribute)) 
                            as EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = Convert.ToString(Convert.ChangeType(value, Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = Enumerable.OfType<object>((Array) value);
                return string.Join(",", Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ISimpleSearchesClient
    {

        /// <summary>
        /// Runs a "simple" search operation.
        /// </summary>
        /// <remarks>
        /// - Runs a "simple" search operation on the repository.<br/>
        /// - Returns a truncated search result listing.<br/>
        /// - Search result listing may be truncated, depending on number of results. Additionally, searches may time out if they take too long. Use the other search route to run full searches.<br/>
        /// - Optionally returns field values for the entries in the search result listing. Each field name needs to be specified in the request. Maximum limit of 10 field names.<br/>
        /// - If field values are requested, only the first value is returned if it is a multi value field.<br/>
        /// - Null or Empty field values should not be used to determine if a field is assigned to the entry.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="fields">Optional array of field names. Field values corresponding to the given field names will be returned for each search result.</param>
        /// <param name="formatFields">Boolean for if field values should be formatted. Only applicable if Fields are specified.</param>
        /// <param name="request">The Laserfiche search command to run.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used for formatting.<br/>
        ///             The value should be a standard language tag. The formatFields query parameter must be set to true, otherwise<br/>
        ///             culture will not be used for formatting.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Simple search run successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ODataValueContextOfIListOfEntry> CreateSimpleSearchOperationAsync(string repoId, string select = null, string orderby = null, bool? count = null, IEnumerable<string> fields = null, bool? formatFields = null, SimpleSearchRequest request = null, string culture = null, CancellationToken cancellationToken = default(CancellationToken));

    }

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SimpleSearchesClient : BaseClient, ISimpleSearchesClient
    {
        private HttpClient _httpClient;
        private Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public SimpleSearchesClient(HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, string url);
        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, StringBuilder urlBuilder);
        partial void ProcessResponse(HttpClient client, HttpResponseMessage response);

        /// <summary>
        /// Runs a "simple" search operation.
        /// </summary>
        /// <remarks>
        /// - Runs a "simple" search operation on the repository.<br/>
        /// - Returns a truncated search result listing.<br/>
        /// - Search result listing may be truncated, depending on number of results. Additionally, searches may time out if they take too long. Use the other search route to run full searches.<br/>
        /// - Optionally returns field values for the entries in the search result listing. Each field name needs to be specified in the request. Maximum limit of 10 field names.<br/>
        /// - If field values are requested, only the first value is returned if it is a multi value field.<br/>
        /// - Null or Empty field values should not be used to determine if a field is assigned to the entry.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="fields">Optional array of field names. Field values corresponding to the given field names will be returned for each search result.</param>
        /// <param name="formatFields">Boolean for if field values should be formatted. Only applicable if Fields are specified.</param>
        /// <param name="request">The Laserfiche search command to run.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used for formatting.<br/>
        ///             The value should be a standard language tag. The formatFields query parameter must be set to true, otherwise<br/>
        ///             culture will not be used for formatting.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Simple search run successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ODataValueContextOfIListOfEntry> CreateSimpleSearchOperationAsync(string repoId, string select = null, string orderby = null, bool? count = null, IEnumerable<string> fields = null, bool? formatFields = null, SimpleSearchRequest request = null, string culture = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/SimpleSearches?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            if (select != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$select") + "=").Append(Uri.EscapeDataString(ConvertToString(select, CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderby != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$orderby") + "=").Append(Uri.EscapeDataString(ConvertToString(orderby, CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$count") + "=").Append(Uri.EscapeDataString(ConvertToString(count, CultureInfo.InvariantCulture))).Append("&");
            }
            if (fields != null)
            {
                foreach (var item_ in fields) { urlBuilder_.Append(Uri.EscapeDataString("fields") + "=").Append(Uri.EscapeDataString(ConvertToString(item_, CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (formatFields != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("formatFields") + "=").Append(Uri.EscapeDataString(ConvertToString(formatFields, CultureInfo.InvariantCulture))).Append("&");
            }
            if (culture != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("culture") + "=").Append(Uri.EscapeDataString(ConvertToString(culture, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await CreateSimpleSearchOperationSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<ODataValueContextOfIListOfEntry> CreateSimpleSearchOperationSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ODataValueContextOfIListOfEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 204)
                {
                    string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseText_, JsonSerializerSettings, null);
                }
                else
                if (status_ == 206)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ODataValueContextOfIListOfEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 413)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(HttpResponseMessage response, IReadOnlyDictionary<string, IEnumerable<string>> headers, CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, responseText, JsonSerializerSettings, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is Enum)
            {
                var name = Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = CustomAttributeExtensions.GetCustomAttribute(field, typeof(EnumMemberAttribute)) 
                            as EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = Convert.ToString(Convert.ChangeType(value, Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = Enumerable.OfType<object>((Array) value);
                return string.Join(",", Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITagDefinitionsClient
    {

        /// <summary>
        /// Returns the tag definitions associated with a repository.
        /// </summary>
        /// <remarks>
        /// - Returns all tag definitions in the repository.<br/>
        /// - Provide a repository ID and get a paged listing of tag definitions available in the repository. Useful when trying to display all tag definitions available, not only tags assigned to a specific entry.<br/>
        /// - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="prefer">An optional OData header. Can be used to set the maximum page size using odata.maxpagesize.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used for formatting.<br/>
        ///             The value should be a standard language tag.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="top">Limits the number of items returned from a collection.</param>
        /// <param name="skip">Excludes the specified number of items of the queried collection from the result.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get tag definitions successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ODataValueContextOfIListOfWTagInfo> GetTagDefinitionsAsync(string repoId, string prefer = null, string culture = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a single tag definition object.
        /// </summary>
        /// <remarks>
        /// - Returns a single tag definition.<br/>
        /// - Provide a tag definition ID, and get the single tag definition associated with that ID. Useful when another route provides a minimal amount of details, and more information about the specific tag is needed.<br/>
        /// - Allowed OData query options: Select
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="tagId">The requested tag definition ID.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used for formatting.<br/>
        ///             The value should be a standard language tag.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get tag definition successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<WTagInfo> GetTagDefinitionByIdAsync(string repoId, int tagId, string culture = null, string select = null, CancellationToken cancellationToken = default(CancellationToken));

    }

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagDefinitionsClient : BaseClient, ITagDefinitionsClient
    {
        private HttpClient _httpClient;
        private Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public TagDefinitionsClient(HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, string url);
        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, StringBuilder urlBuilder);
        partial void ProcessResponse(HttpClient client, HttpResponseMessage response);

        /// <summary>
        /// Returns the tag definitions associated with a repository.
        /// </summary>
        /// <remarks>
        /// - Returns all tag definitions in the repository.<br/>
        /// - Provide a repository ID and get a paged listing of tag definitions available in the repository. Useful when trying to display all tag definitions available, not only tags assigned to a specific entry.<br/>
        /// - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="prefer">An optional OData header. Can be used to set the maximum page size using odata.maxpagesize.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used for formatting.<br/>
        ///             The value should be a standard language tag.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="top">Limits the number of items returned from a collection.</param>
        /// <param name="skip">Excludes the specified number of items of the queried collection from the result.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get tag definitions successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ODataValueContextOfIListOfWTagInfo> GetTagDefinitionsAsync(string repoId, string prefer = null, string culture = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/TagDefinitions?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            if (culture != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("culture") + "=").Append(Uri.EscapeDataString(ConvertToString(culture, CultureInfo.InvariantCulture))).Append("&");
            }
            if (select != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$select") + "=").Append(Uri.EscapeDataString(ConvertToString(select, CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderby != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$orderby") + "=").Append(Uri.EscapeDataString(ConvertToString(orderby, CultureInfo.InvariantCulture))).Append("&");
            }
            if (top != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$top") + "=").Append(Uri.EscapeDataString(ConvertToString(top, CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$skip") + "=").Append(Uri.EscapeDataString(ConvertToString(skip, CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$count") + "=").Append(Uri.EscapeDataString(ConvertToString(count, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {

                    if (prefer != null)
                        request_.Headers.TryAddWithoutValidation("Prefer", ConvertToString(prefer, CultureInfo.InvariantCulture));
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await GetTagDefinitionsSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<ODataValueContextOfIListOfWTagInfo> GetTagDefinitionsSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ODataValueContextOfIListOfWTagInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Returns a single tag definition object.
        /// </summary>
        /// <remarks>
        /// - Returns a single tag definition.<br/>
        /// - Provide a tag definition ID, and get the single tag definition associated with that ID. Useful when another route provides a minimal amount of details, and more information about the specific tag is needed.<br/>
        /// - Allowed OData query options: Select
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="tagId">The requested tag definition ID.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used for formatting.<br/>
        ///             The value should be a standard language tag.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get tag definition successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<WTagInfo> GetTagDefinitionByIdAsync(string repoId, int tagId, string culture = null, string select = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (tagId == null)
                throw new ArgumentNullException("tagId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/TagDefinitions/{tagId}?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{tagId}", Uri.EscapeDataString(ConvertToString(tagId, CultureInfo.InvariantCulture)));
            if (culture != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("culture") + "=").Append(Uri.EscapeDataString(ConvertToString(culture, CultureInfo.InvariantCulture))).Append("&");
            }
            if (select != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$select") + "=").Append(Uri.EscapeDataString(ConvertToString(select, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await GetTagDefinitionByIdSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<WTagInfo> GetTagDefinitionByIdSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<WTagInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(HttpResponseMessage response, IReadOnlyDictionary<string, IEnumerable<string>> headers, CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, responseText, JsonSerializerSettings, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is Enum)
            {
                var name = Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = CustomAttributeExtensions.GetCustomAttribute(field, typeof(EnumMemberAttribute)) 
                            as EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = Convert.ToString(Convert.ChangeType(value, Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = Enumerable.OfType<object>((Array) value);
                return string.Join(",", Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITasksClient
    {

        /// <summary>
        /// Returns the status of an operation.
        /// </summary>
        /// <remarks>
        /// - Returns the status of an operation.<br/>
        /// - Provide an operationToken (returned in other asynchronous routes) to get the operation status, progress, and any errors that may have occurred. When the operation is completed, the Location header can be inspected as a link to the modified resources (if relevant).<br/>
        /// - OperationStatus can be one of the following values: NotStarted, InProgress, Completed, or Failed.
        /// </remarks>
        /// <param name="repoId">The requested repository ID</param>
        /// <param name="operationToken">The operation token</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get completed or failed operation status with no result successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<OperationProgress> GetOperationStatusAndProgressAsync(string repoId, string operationToken, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancels an operation.
        /// </summary>
        /// <remarks>
        /// - Cancels an operation.<br/>
        /// - Provide an operationToken to cancel the operation, if possible. Should be used if an operation was created in error, or is no longer necessary.<br/>
        /// - Rollbacks must be done manually. For example, if a copy operation is started and is halfway complete when canceled, the client application is responsible for cleaning up the files that were successfully copied before the operation was canceled.
        /// </remarks>
        /// <param name="repoId">The requested repository ID</param>
        /// <param name="operationToken">The operation token</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Cancel operation successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task CancelOperationAsync(string repoId, string operationToken, CancellationToken cancellationToken = default(CancellationToken));

    }

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TasksClient : BaseClient, ITasksClient
    {
        private HttpClient _httpClient;
        private Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public TasksClient(HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, string url);
        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, StringBuilder urlBuilder);
        partial void ProcessResponse(HttpClient client, HttpResponseMessage response);

        /// <summary>
        /// Returns the status of an operation.
        /// </summary>
        /// <remarks>
        /// - Returns the status of an operation.<br/>
        /// - Provide an operationToken (returned in other asynchronous routes) to get the operation status, progress, and any errors that may have occurred. When the operation is completed, the Location header can be inspected as a link to the modified resources (if relevant).<br/>
        /// - OperationStatus can be one of the following values: NotStarted, InProgress, Completed, or Failed.
        /// </remarks>
        /// <param name="repoId">The requested repository ID</param>
        /// <param name="operationToken">The operation token</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get completed or failed operation status with no result successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<OperationProgress> GetOperationStatusAndProgressAsync(string repoId, string operationToken, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (operationToken == null)
                throw new ArgumentNullException("operationToken");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Tasks/{operationToken}");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{operationToken}", Uri.EscapeDataString(ConvertToString(operationToken, CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await GetOperationStatusAndProgressSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<OperationProgress> GetOperationStatusAndProgressSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<OperationProgress>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 201)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<OperationProgress>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 202)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<OperationProgress>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Cancels an operation.
        /// </summary>
        /// <remarks>
        /// - Cancels an operation.<br/>
        /// - Provide an operationToken to cancel the operation, if possible. Should be used if an operation was created in error, or is no longer necessary.<br/>
        /// - Rollbacks must be done manually. For example, if a copy operation is started and is halfway complete when canceled, the client application is responsible for cleaning up the files that were successfully copied before the operation was canceled.
        /// </remarks>
        /// <param name="repoId">The requested repository ID</param>
        /// <param name="operationToken">The operation token</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Cancel operation successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task CancelOperationAsync(string repoId, string operationToken, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (operationToken == null)
                throw new ArgumentNullException("operationToken");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/Tasks/{operationToken}");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{operationToken}", Uri.EscapeDataString(ConvertToString(operationToken, CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    request_.Method = new HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    await CancelOperationSendAsync(request_, client_, disposeClient_, cancellationToken);
                    return;
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task CancelOperationSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 204)
                {
                    return;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(HttpResponseMessage response, IReadOnlyDictionary<string, IEnumerable<string>> headers, CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, responseText, JsonSerializerSettings, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is Enum)
            {
                var name = Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = CustomAttributeExtensions.GetCustomAttribute(field, typeof(EnumMemberAttribute)) 
                            as EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = Convert.ToString(Convert.ChangeType(value, Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = Enumerable.OfType<object>((Array) value);
                return string.Join(",", Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ITemplateDefinitionsClient
    {

        /// <summary>
        /// Returns the template definitions associated with a repository.
        /// </summary>
        /// <remarks>
        /// - Returns all template definitions (including field definitions) in the repository. If a template name query parameter is given, then a single template definition is returned.<br/>
        /// - Provide a repository ID, and get a paged listing of template definitions available in the repository. Useful when trying to find a list of all template definitions available, rather than a specific one.<br/>
        /// - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="templateName">An optional query parameter. Can be used to get a single template definition using the template name.</param>
        /// <param name="prefer">An optional OData header. Can be used to set the maximum page size using odata.maxpagesize.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used for formatting.<br/>
        ///             The value should be a standard language tag.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="top">Limits the number of items returned from a collection.</param>
        /// <param name="skip">Excludes the specified number of items of the queried collection from the result.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get template definitions successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ODataValueContextOfIListOfWTemplateInfo> GetTemplateDefinitionsAsync(string repoId, string templateName = null, string prefer = null, string culture = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a single template definition object.
        /// </summary>
        /// <remarks>
        /// - Returns a single template definition (including field definitions, if relevant).<br/>
        /// - Provide a template definition ID, and get the single template definition associated with that ID. Useful when a route provides a minimal amount of details, and more information about the specific template is needed.<br/>
        /// - Allowed OData query options: Select
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="templateId">The requested template definition ID.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used for formatting.<br/>
        ///             The value should be a standard language tag.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get template definition successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<WTemplateInfo> GetTemplateDefinitionByIdAsync(string repoId, int templateId, string culture = null, string select = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the field definitions assigned to a template definition (by template definition ID).
        /// </summary>
        /// <remarks>
        /// - Returns the field definitions assigned to a template definition.<br/>
        /// - Provide a template definition ID, and get a paged listing of the field definitions assigned to that template. <br/>
        /// - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="templateId">The requested template definition ID.</param>
        /// <param name="prefer">An optional OData header. Can be used to set the maximum page size using odata.maxpagesize.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used for formatting.<br/>
        ///             The value should be a standard language tag.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="top">Limits the number of items returned from a collection.</param>
        /// <param name="skip">Excludes the specified number of items of the queried collection from the result.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get template field definitions successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ODataValueContextOfIListOfTemplateFieldInfo> GetTemplateFieldDefinitionsAsync(string repoId, int templateId, string prefer = null, string culture = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the field definitions assigned to a template definition (by template definition name).
        /// </summary>
        /// <remarks>
        /// - Returns the field definitions assigned to a template definition.<br/>
        /// - Provide a template definition name, and get a paged listing of the field definitions assigned to that template. <br/>
        /// - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="templateName">A required query parameter for the requested template name.</param>
        /// <param name="prefer">An optional OData header. Can be used to set the maximum page size using odata.maxpagesize.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used for formatting.<br/>
        ///             The value should be a standard language tag.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="top">Limits the number of items returned from a collection.</param>
        /// <param name="skip">Excludes the specified number of items of the queried collection from the result.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get template field definitions successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ODataValueContextOfIListOfTemplateFieldInfo> GetTemplateFieldDefinitionsByTemplateNameAsync(string repoId, string templateName, string prefer = null, string culture = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null, CancellationToken cancellationToken = default(CancellationToken));

    }

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemplateDefinitionsClient : BaseClient, ITemplateDefinitionsClient
    {
        private HttpClient _httpClient;
        private Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public TemplateDefinitionsClient(HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, string url);
        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, StringBuilder urlBuilder);
        partial void ProcessResponse(HttpClient client, HttpResponseMessage response);

        /// <summary>
        /// Returns the template definitions associated with a repository.
        /// </summary>
        /// <remarks>
        /// - Returns all template definitions (including field definitions) in the repository. If a template name query parameter is given, then a single template definition is returned.<br/>
        /// - Provide a repository ID, and get a paged listing of template definitions available in the repository. Useful when trying to find a list of all template definitions available, rather than a specific one.<br/>
        /// - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="templateName">An optional query parameter. Can be used to get a single template definition using the template name.</param>
        /// <param name="prefer">An optional OData header. Can be used to set the maximum page size using odata.maxpagesize.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used for formatting.<br/>
        ///             The value should be a standard language tag.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="top">Limits the number of items returned from a collection.</param>
        /// <param name="skip">Excludes the specified number of items of the queried collection from the result.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get template definitions successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ODataValueContextOfIListOfWTemplateInfo> GetTemplateDefinitionsAsync(string repoId, string templateName = null, string prefer = null, string culture = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/TemplateDefinitions?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            if (templateName != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("templateName") + "=").Append(Uri.EscapeDataString(ConvertToString(templateName, CultureInfo.InvariantCulture))).Append("&");
            }
            if (culture != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("culture") + "=").Append(Uri.EscapeDataString(ConvertToString(culture, CultureInfo.InvariantCulture))).Append("&");
            }
            if (select != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$select") + "=").Append(Uri.EscapeDataString(ConvertToString(select, CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderby != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$orderby") + "=").Append(Uri.EscapeDataString(ConvertToString(orderby, CultureInfo.InvariantCulture))).Append("&");
            }
            if (top != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$top") + "=").Append(Uri.EscapeDataString(ConvertToString(top, CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$skip") + "=").Append(Uri.EscapeDataString(ConvertToString(skip, CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$count") + "=").Append(Uri.EscapeDataString(ConvertToString(count, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {

                    if (prefer != null)
                        request_.Headers.TryAddWithoutValidation("Prefer", ConvertToString(prefer, CultureInfo.InvariantCulture));
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await GetTemplateDefinitionsSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<ODataValueContextOfIListOfWTemplateInfo> GetTemplateDefinitionsSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ODataValueContextOfIListOfWTemplateInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Returns a single template definition object.
        /// </summary>
        /// <remarks>
        /// - Returns a single template definition (including field definitions, if relevant).<br/>
        /// - Provide a template definition ID, and get the single template definition associated with that ID. Useful when a route provides a minimal amount of details, and more information about the specific template is needed.<br/>
        /// - Allowed OData query options: Select
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="templateId">The requested template definition ID.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used for formatting.<br/>
        ///             The value should be a standard language tag.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get template definition successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<WTemplateInfo> GetTemplateDefinitionByIdAsync(string repoId, int templateId, string culture = null, string select = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (templateId == null)
                throw new ArgumentNullException("templateId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/TemplateDefinitions/{templateId}?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{templateId}", Uri.EscapeDataString(ConvertToString(templateId, CultureInfo.InvariantCulture)));
            if (culture != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("culture") + "=").Append(Uri.EscapeDataString(ConvertToString(culture, CultureInfo.InvariantCulture))).Append("&");
            }
            if (select != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$select") + "=").Append(Uri.EscapeDataString(ConvertToString(select, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await GetTemplateDefinitionByIdSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<WTemplateInfo> GetTemplateDefinitionByIdSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<WTemplateInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Returns the field definitions assigned to a template definition (by template definition ID).
        /// </summary>
        /// <remarks>
        /// - Returns the field definitions assigned to a template definition.<br/>
        /// - Provide a template definition ID, and get a paged listing of the field definitions assigned to that template. <br/>
        /// - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="templateId">The requested template definition ID.</param>
        /// <param name="prefer">An optional OData header. Can be used to set the maximum page size using odata.maxpagesize.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used for formatting.<br/>
        ///             The value should be a standard language tag.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="top">Limits the number of items returned from a collection.</param>
        /// <param name="skip">Excludes the specified number of items of the queried collection from the result.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get template field definitions successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ODataValueContextOfIListOfTemplateFieldInfo> GetTemplateFieldDefinitionsAsync(string repoId, int templateId, string prefer = null, string culture = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            if (templateId == null)
                throw new ArgumentNullException("templateId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/TemplateDefinitions/{templateId}/Fields?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{templateId}", Uri.EscapeDataString(ConvertToString(templateId, CultureInfo.InvariantCulture)));
            if (culture != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("culture") + "=").Append(Uri.EscapeDataString(ConvertToString(culture, CultureInfo.InvariantCulture))).Append("&");
            }
            if (select != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$select") + "=").Append(Uri.EscapeDataString(ConvertToString(select, CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderby != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$orderby") + "=").Append(Uri.EscapeDataString(ConvertToString(orderby, CultureInfo.InvariantCulture))).Append("&");
            }
            if (top != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$top") + "=").Append(Uri.EscapeDataString(ConvertToString(top, CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$skip") + "=").Append(Uri.EscapeDataString(ConvertToString(skip, CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$count") + "=").Append(Uri.EscapeDataString(ConvertToString(count, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {

                    if (prefer != null)
                        request_.Headers.TryAddWithoutValidation("Prefer", ConvertToString(prefer, CultureInfo.InvariantCulture));
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await GetTemplateFieldDefinitionsSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<ODataValueContextOfIListOfTemplateFieldInfo> GetTemplateFieldDefinitionsSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ODataValueContextOfIListOfTemplateFieldInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Returns the field definitions assigned to a template definition (by template definition name).
        /// </summary>
        /// <remarks>
        /// - Returns the field definitions assigned to a template definition.<br/>
        /// - Provide a template definition name, and get a paged listing of the field definitions assigned to that template. <br/>
        /// - Default page size: 100. Allowed OData query options: Select | Count | OrderBy | Skip | Top | SkipToken | Prefer.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="templateName">A required query parameter for the requested template name.</param>
        /// <param name="prefer">An optional OData header. Can be used to set the maximum page size using odata.maxpagesize.</param>
        /// <param name="culture">An optional query parameter used to indicate the locale that should be used for formatting.<br/>
        ///             The value should be a standard language tag.</param>
        /// <param name="select">Limits the properties returned in the result.</param>
        /// <param name="orderby">Specifies the order in which items are returned. The maximum number of expressions is 5.</param>
        /// <param name="top">Limits the number of items returned from a collection.</param>
        /// <param name="skip">Excludes the specified number of items of the queried collection from the result.</param>
        /// <param name="count">Indicates whether the total count of items within a collection are returned in the result.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Get template field definitions successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ODataValueContextOfIListOfTemplateFieldInfo> GetTemplateFieldDefinitionsByTemplateNameAsync(string repoId, string templateName, string prefer = null, string culture = null, string select = null, string orderby = null, int? top = null, int? skip = null, bool? count = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/TemplateDefinitions/Fields?");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));
            urlBuilder_.Append(Uri.EscapeDataString("templateName") + "=").Append(Uri.EscapeDataString(templateName != null ? ConvertToString(templateName, CultureInfo.InvariantCulture) : "")).Append("&");
            if (culture != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("culture") + "=").Append(Uri.EscapeDataString(ConvertToString(culture, CultureInfo.InvariantCulture))).Append("&");
            }
            if (select != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$select") + "=").Append(Uri.EscapeDataString(ConvertToString(select, CultureInfo.InvariantCulture))).Append("&");
            }
            if (orderby != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$orderby") + "=").Append(Uri.EscapeDataString(ConvertToString(orderby, CultureInfo.InvariantCulture))).Append("&");
            }
            if (top != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$top") + "=").Append(Uri.EscapeDataString(ConvertToString(top, CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$skip") + "=").Append(Uri.EscapeDataString(ConvertToString(skip, CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null)
            {
                urlBuilder_.Append(Uri.EscapeDataString("$count") + "=").Append(Uri.EscapeDataString(ConvertToString(count, CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {

                    if (prefer != null)
                        request_.Headers.TryAddWithoutValidation("Prefer", ConvertToString(prefer, CultureInfo.InvariantCulture));
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await GetTemplateFieldDefinitionsByTemplateNameSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<ODataValueContextOfIListOfTemplateFieldInfo> GetTemplateFieldDefinitionsByTemplateNameSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ODataValueContextOfIListOfTemplateFieldInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(HttpResponseMessage response, IReadOnlyDictionary<string, IEnumerable<string>> headers, CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, responseText, JsonSerializerSettings, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is Enum)
            {
                var name = Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = CustomAttributeExtensions.GetCustomAttribute(field, typeof(EnumMemberAttribute)) 
                            as EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = Convert.ToString(Convert.ChangeType(value, Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = Enumerable.OfType<object>((Array) value);
                return string.Join(",", Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IServerSessionClient
    {

        /// <summary>
        /// Deprecated. Do not call this api.
        /// </summary>
        /// <remarks>
        /// - Deprecated.<br/>
        /// - Invalidates the server session.<br/>
        /// - Acts as a "logout" operation, and invalidates the session associated with the provided access token. This method should be used when the client wants to clean up the current session.<br/>
        /// - Only available in Laserfiche Cloud.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Invalidate the server session successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [Obsolete]
        Task<ODataValueOfBoolean> InvalidateServerSessionAsync(string repoId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deprecated. Do not call this api.
        /// </summary>
        /// <remarks>
        /// - Deprecated.<br/>
        /// - Refreshes the session associated with the access token. This is only necessary if you want to keep the same session alive, otherwise a new session will be automatically created when the session expires.<br/>
        /// - When a client application wants to keep a session alive that has been idle for an hour, this route can be used to refresh the expiration timer associated with the access token.<br/>
        /// - Only available in Laserfiche Cloud.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Refresh the session successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [Obsolete]
        Task<ODataValueOfDateTime> RefreshServerSessionAsync(string repoId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deprecated. Do not call this api.
        /// </summary>
        /// <remarks>
        /// - Deprecated. This function is a no-op, always returns 200.<br/>
        /// - Only available in Laserfiche Cloud.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Create the session successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [Obsolete]
        Task<ODataValueOfBoolean> CreateServerSessionAsync(string repoId, CancellationToken cancellationToken = default(CancellationToken));

    }

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServerSessionClient : BaseClient, IServerSessionClient
    {
        private HttpClient _httpClient;
        private Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public ServerSessionClient(HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, string url);
        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, StringBuilder urlBuilder);
        partial void ProcessResponse(HttpClient client, HttpResponseMessage response);

        /// <summary>
        /// Deprecated. Do not call this api.
        /// </summary>
        /// <remarks>
        /// - Deprecated.<br/>
        /// - Invalidates the server session.<br/>
        /// - Acts as a "logout" operation, and invalidates the session associated with the provided access token. This method should be used when the client wants to clean up the current session.<br/>
        /// - Only available in Laserfiche Cloud.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Invalidate the server session successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [Obsolete]
        public virtual async Task<ODataValueOfBoolean> InvalidateServerSessionAsync(string repoId, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/ServerSession/Invalidate");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    request_.Content = new StringContent(string.Empty, Encoding.UTF8, "application/json");
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await InvalidateServerSessionSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<ODataValueOfBoolean> InvalidateServerSessionSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ODataValueOfBoolean>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Deprecated. Do not call this api.
        /// </summary>
        /// <remarks>
        /// - Deprecated.<br/>
        /// - Refreshes the session associated with the access token. This is only necessary if you want to keep the same session alive, otherwise a new session will be automatically created when the session expires.<br/>
        /// - When a client application wants to keep a session alive that has been idle for an hour, this route can be used to refresh the expiration timer associated with the access token.<br/>
        /// - Only available in Laserfiche Cloud.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Refresh the session successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [Obsolete]
        public virtual async Task<ODataValueOfDateTime> RefreshServerSessionAsync(string repoId, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/ServerSession/Refresh");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    request_.Content = new StringContent(string.Empty, Encoding.UTF8, "application/json");
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await RefreshServerSessionSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<ODataValueOfDateTime> RefreshServerSessionSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ODataValueOfDateTime>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 400)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 404)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 429)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        /// <summary>
        /// Deprecated. Do not call this api.
        /// </summary>
        /// <remarks>
        /// - Deprecated. This function is a no-op, always returns 200.<br/>
        /// - Only available in Laserfiche Cloud.
        /// </remarks>
        /// <param name="repoId">The requested repository ID.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Create the session successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [Obsolete]
        public virtual async Task<ODataValueOfBoolean> CreateServerSessionAsync(string repoId, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (repoId == null)
                throw new ArgumentNullException("repoId");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append("v1/Repositories/{repoId}/ServerSession/Create");
            urlBuilder_.Replace("{repoId}", Uri.EscapeDataString(ConvertToString(repoId, CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            bool[] disposeClient_ = new bool[]{ false };
            try
            {
                using (var request_ = new HttpRequestMessage())
                {
                    request_.Content = new StringContent(string.Empty, Encoding.UTF8, "application/json");
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    return await CreateServerSessionSendAsync(request_, client_, disposeClient_, cancellationToken);
                }
            }
            finally
            {
                if (disposeClient_[0])
                    client_.Dispose();
            }
        }

        protected virtual async Task<ODataValueOfBoolean> CreateServerSessionSendAsync(HttpRequestMessage request_, HttpClient client_, bool[] disposeClient_, CancellationToken cancellationToken = default(CancellationToken))
        {
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            var disposeResponse_ = true;
            try
            {
                var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                if (response_.Content != null && response_.Content.Headers != null)
                {
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;
                }

                ProcessResponse(client_, response_);

                var status_ = (int)response_.StatusCode;
                if (status_ == 200)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ODataValueOfBoolean>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    return objectResponse_.Object;
                }
                else
                if (status_ == 401)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                if (status_ == 403)
                {
                    var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                    if (objectResponse_.Object == null)
                    {
                        throw ApiExceptionExtensions.Create(status_, headers_, null);
                    }
                    throw ApiExceptionExtensions.Create(status_, headers_, objectResponse_.Object, null);
                }
                else
                {
                    var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                    throw ApiExceptionExtensions.Create(status_, headers_, responseData_, JsonSerializerSettings, null);
                }
            }
            finally
            {
                if (disposeResponse_)
                    response_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(HttpResponseMessage response, IReadOnlyDictionary<string, IEnumerable<string>> headers, CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, responseText, JsonSerializerSettings, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw ApiExceptionExtensions.Create((int)response.StatusCode, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is Enum)
            {
                var name = Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = CustomAttributeExtensions.GetCustomAttribute(field, typeof(EnumMemberAttribute)) 
                            as EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = Convert.ToString(Convert.ChangeType(value, Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = Enumerable.OfType<object>((Array) value);
                return string.Join(",", Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateEntryResult
    {
        [Newtonsoft.Json.JsonProperty("operations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreateEntryOperations Operations { get; set; }

        /// <summary>
        /// A link to get the created entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentLink { get; set; }

    }

    /// <summary>
    /// The results of each operation needed in order to create the electronic document with optional template and fields.
    /// </summary>
    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateEntryOperations
    {
        [Newtonsoft.Json.JsonProperty("entryCreate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EntryCreate EntryCreate { get; set; }

        [Newtonsoft.Json.JsonProperty("setEdoc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetEdoc SetEdoc { get; set; }

        [Newtonsoft.Json.JsonProperty("setTemplate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetTemplate SetTemplate { get; set; }

        [Newtonsoft.Json.JsonProperty("setFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetFields SetFields { get; set; }

        [Newtonsoft.Json.JsonProperty("setTags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetTags SetTags { get; set; }

        [Newtonsoft.Json.JsonProperty("setLinks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SetLinks SetLinks { get; set; }

    }

    /// <summary>
    /// The result of trying to create the entry.
    /// </summary>
    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EntryCreate
    {
        /// <summary>
        /// The list of exceptions that occured when trying to perform the operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<APIServerException> Exceptions { get; set; }

        /// <summary>
        /// The id of the created entry. If the id is 0, then the entry was not created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EntryId { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class APIServerException
    {
        /// <summary>
        /// The id of the operation that threw the exception.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OperationId { get; set; }

        /// <summary>
        /// The explaination of the exception that occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// The code associated with the exception.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ErrorCode { get; set; }

        /// <summary>
        /// The class of exceptions this belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorClass { get; set; }

        /// <summary>
        /// The HTTP status code returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StatusCode { get; set; }

        /// <summary>
        /// The source of where the exception occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorSource { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The result of trying to create the electronic document.
    /// </summary>
    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SetEdoc
    {
        /// <summary>
        /// The list of exceptions that occured when trying to perform the operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<APIServerException> Exceptions { get; set; }

    }

    /// <summary>
    /// The result of trying to assign a template to the entry.
    /// </summary>
    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SetTemplate
    {
        /// <summary>
        /// The list of exceptions that occured when trying to perform the operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<APIServerException> Exceptions { get; set; }

        /// <summary>
        /// The name of the template assigned to the entry. If this is null, then no template was assigned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template { get; set; }

    }

    /// <summary>
    /// The result of trying to assign fields to the entry.
    /// </summary>
    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SetFields
    {
        /// <summary>
        /// The list of exceptions that occured when trying to perform the operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<APIServerException> Exceptions { get; set; }

        /// <summary>
        /// The number of fields assigned to the entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FieldCount { get; set; }

    }

    /// <summary>
    /// The result of trying to assign fields to the entry.
    /// </summary>
    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SetTags
    {
        /// <summary>
        /// The list of exceptions that occured when trying to perform the operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<APIServerException> Exceptions { get; set; }

        /// <summary>
        /// The tags that were assigned to the entry
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assignedTags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<string> AssignedTags { get; set; }

    }

    /// <summary>
    /// The result of trying to assign a entry link to the entry.
    /// </summary>
    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SetLinks
    {
        /// <summary>
        /// The list of exceptions that occured when trying to perform the operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exceptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<APIServerException> Exceptions { get; set; }

        /// <summary>
        /// The ids of the other entries linked to the entry
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherEntryIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<int> OtherEntryIds { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class IHeaderDictionary
    {
        [Newtonsoft.Json.JsonProperty("Item", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> Item { get; set; }

        [Newtonsoft.Json.JsonProperty("ContentLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ContentLength { get; set; }

        [Newtonsoft.Json.JsonProperty("Accept", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> Accept { get; set; }

        [Newtonsoft.Json.JsonProperty("AcceptCharset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> AcceptCharset { get; set; }

        [Newtonsoft.Json.JsonProperty("AcceptEncoding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> AcceptEncoding { get; set; }

        [Newtonsoft.Json.JsonProperty("AcceptLanguage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> AcceptLanguage { get; set; }

        [Newtonsoft.Json.JsonProperty("AcceptRanges", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> AcceptRanges { get; set; }

        [Newtonsoft.Json.JsonProperty("AccessControlAllowCredentials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> AccessControlAllowCredentials { get; set; }

        [Newtonsoft.Json.JsonProperty("AccessControlAllowHeaders", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> AccessControlAllowHeaders { get; set; }

        [Newtonsoft.Json.JsonProperty("AccessControlAllowMethods", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> AccessControlAllowMethods { get; set; }

        [Newtonsoft.Json.JsonProperty("AccessControlAllowOrigin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> AccessControlAllowOrigin { get; set; }

        [Newtonsoft.Json.JsonProperty("AccessControlExposeHeaders", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> AccessControlExposeHeaders { get; set; }

        [Newtonsoft.Json.JsonProperty("AccessControlMaxAge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> AccessControlMaxAge { get; set; }

        [Newtonsoft.Json.JsonProperty("AccessControlRequestHeaders", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> AccessControlRequestHeaders { get; set; }

        [Newtonsoft.Json.JsonProperty("AccessControlRequestMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> AccessControlRequestMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("Age", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> Age { get; set; }

        [Newtonsoft.Json.JsonProperty("Allow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> Allow { get; set; }

        [Newtonsoft.Json.JsonProperty("AltSvc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> AltSvc { get; set; }

        [Newtonsoft.Json.JsonProperty("Authorization", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> Authorization { get; set; }

        [Newtonsoft.Json.JsonProperty("Baggage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> Baggage { get; set; }

        [Newtonsoft.Json.JsonProperty("CacheControl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> CacheControl { get; set; }

        [Newtonsoft.Json.JsonProperty("Connection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> Connection { get; set; }

        [Newtonsoft.Json.JsonProperty("ContentDisposition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> ContentDisposition { get; set; }

        [Newtonsoft.Json.JsonProperty("ContentEncoding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> ContentEncoding { get; set; }

        [Newtonsoft.Json.JsonProperty("ContentLanguage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> ContentLanguage { get; set; }

        [Newtonsoft.Json.JsonProperty("ContentLocation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> ContentLocation { get; set; }

        [Newtonsoft.Json.JsonProperty("ContentMD5", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> ContentMD5 { get; set; }

        [Newtonsoft.Json.JsonProperty("ContentRange", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> ContentRange { get; set; }

        [Newtonsoft.Json.JsonProperty("ContentSecurityPolicy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> ContentSecurityPolicy { get; set; }

        [Newtonsoft.Json.JsonProperty("ContentSecurityPolicyReportOnly", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> ContentSecurityPolicyReportOnly { get; set; }

        [Newtonsoft.Json.JsonProperty("ContentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> ContentType { get; set; }

        [Newtonsoft.Json.JsonProperty("CorrelationContext", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> CorrelationContext { get; set; }

        [Newtonsoft.Json.JsonProperty("Cookie", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> Cookie { get; set; }

        [Newtonsoft.Json.JsonProperty("Date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> Date { get; set; }

        [Newtonsoft.Json.JsonProperty("ETag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> ETag { get; set; }

        [Newtonsoft.Json.JsonProperty("Expires", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> Expires { get; set; }

        [Newtonsoft.Json.JsonProperty("Expect", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> Expect { get; set; }

        [Newtonsoft.Json.JsonProperty("From", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> From { get; set; }

        [Newtonsoft.Json.JsonProperty("GrpcAcceptEncoding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> GrpcAcceptEncoding { get; set; }

        [Newtonsoft.Json.JsonProperty("GrpcEncoding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> GrpcEncoding { get; set; }

        [Newtonsoft.Json.JsonProperty("GrpcMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> GrpcMessage { get; set; }

        [Newtonsoft.Json.JsonProperty("GrpcStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> GrpcStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("GrpcTimeout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> GrpcTimeout { get; set; }

        [Newtonsoft.Json.JsonProperty("Host", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> Host { get; set; }

        [Newtonsoft.Json.JsonProperty("KeepAlive", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> KeepAlive { get; set; }

        [Newtonsoft.Json.JsonProperty("IfMatch", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> IfMatch { get; set; }

        [Newtonsoft.Json.JsonProperty("IfModifiedSince", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> IfModifiedSince { get; set; }

        [Newtonsoft.Json.JsonProperty("IfNoneMatch", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> IfNoneMatch { get; set; }

        [Newtonsoft.Json.JsonProperty("IfRange", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> IfRange { get; set; }

        [Newtonsoft.Json.JsonProperty("IfUnmodifiedSince", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> IfUnmodifiedSince { get; set; }

        [Newtonsoft.Json.JsonProperty("LastModified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> LastModified { get; set; }

        [Newtonsoft.Json.JsonProperty("Link", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> Link { get; set; }

        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> Location { get; set; }

        [Newtonsoft.Json.JsonProperty("MaxForwards", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> MaxForwards { get; set; }

        [Newtonsoft.Json.JsonProperty("Origin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> Origin { get; set; }

        [Newtonsoft.Json.JsonProperty("Pragma", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> Pragma { get; set; }

        [Newtonsoft.Json.JsonProperty("ProxyAuthenticate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> ProxyAuthenticate { get; set; }

        [Newtonsoft.Json.JsonProperty("ProxyAuthorization", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> ProxyAuthorization { get; set; }

        [Newtonsoft.Json.JsonProperty("ProxyConnection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> ProxyConnection { get; set; }

        [Newtonsoft.Json.JsonProperty("Range", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> Range { get; set; }

        [Newtonsoft.Json.JsonProperty("Referer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> Referer { get; set; }

        [Newtonsoft.Json.JsonProperty("RetryAfter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> RetryAfter { get; set; }

        [Newtonsoft.Json.JsonProperty("RequestId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> RequestId { get; set; }

        [Newtonsoft.Json.JsonProperty("SecWebSocketAccept", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> SecWebSocketAccept { get; set; }

        [Newtonsoft.Json.JsonProperty("SecWebSocketKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> SecWebSocketKey { get; set; }

        [Newtonsoft.Json.JsonProperty("SecWebSocketProtocol", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> SecWebSocketProtocol { get; set; }

        [Newtonsoft.Json.JsonProperty("SecWebSocketVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> SecWebSocketVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("SecWebSocketExtensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> SecWebSocketExtensions { get; set; }

        [Newtonsoft.Json.JsonProperty("Server", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> Server { get; set; }

        [Newtonsoft.Json.JsonProperty("SetCookie", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> SetCookie { get; set; }

        [Newtonsoft.Json.JsonProperty("StrictTransportSecurity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> StrictTransportSecurity { get; set; }

        [Newtonsoft.Json.JsonProperty("TE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> TE { get; set; }

        [Newtonsoft.Json.JsonProperty("Trailer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> Trailer { get; set; }

        [Newtonsoft.Json.JsonProperty("TransferEncoding", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> TransferEncoding { get; set; }

        [Newtonsoft.Json.JsonProperty("Translate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> Translate { get; set; }

        [Newtonsoft.Json.JsonProperty("TraceParent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> TraceParent { get; set; }

        [Newtonsoft.Json.JsonProperty("TraceState", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> TraceState { get; set; }

        [Newtonsoft.Json.JsonProperty("Upgrade", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> Upgrade { get; set; }

        [Newtonsoft.Json.JsonProperty("UpgradeInsecureRequests", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> UpgradeInsecureRequests { get; set; }

        [Newtonsoft.Json.JsonProperty("UserAgent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> UserAgent { get; set; }

        [Newtonsoft.Json.JsonProperty("Vary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> Vary { get; set; }

        [Newtonsoft.Json.JsonProperty("Via", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> Via { get; set; }

        [Newtonsoft.Json.JsonProperty("Warning", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> Warning { get; set; }

        [Newtonsoft.Json.JsonProperty("WebSocketSubProtocols", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> WebSocketSubProtocols { get; set; }

        [Newtonsoft.Json.JsonProperty("WWWAuthenticate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> WWWAuthenticate { get; set; }

        [Newtonsoft.Json.JsonProperty("XContentTypeOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> XContentTypeOptions { get; set; }

        [Newtonsoft.Json.JsonProperty("XFrameOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> XFrameOptions { get; set; }

        [Newtonsoft.Json.JsonProperty("XPoweredBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> XPoweredBy { get; set; }

        [Newtonsoft.Json.JsonProperty("XRequestedWith", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> XRequestedWith { get; set; }

        [Newtonsoft.Json.JsonProperty("XUACompatible", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> XUACompatible { get; set; }

        [Newtonsoft.Json.JsonProperty("XXSSProtection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<object> XXSSProtection { get; set; }

    }

    /// <summary>
    /// The request body containing fields that will be assigned to the entry.
    /// </summary>
    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldToUpdate
    {
        /// <summary>
        /// The field values that will be assigned to the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<ValueToUpdate> Values { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValueToUpdate
    {
        /// <summary>
        /// The value assigned to the field at the position specified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// The position of the value in the field. This is 1-indexed for multi value field. It will be ignored for single value field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Position { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LinkToUpdate
    {
        /// <summary>
        /// The id of the link assigned to the entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkTypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int LinkTypeId { get; set; }

        /// <summary>
        /// The id of the other source linked to the entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherSourceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OtherSourceId { get; set; }

        /// <summary>
        /// Whether the entry is the source for the link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSource { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostEntryWithEdocMetadataRequest
    {
        /// <summary>
        /// The name of the template assigned to the entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PutFieldValsRequest Metadata { get; set; }

        /// <summary>
        /// The name of the volume to use. Will use the default parent entry volume if not specified. This is ignored in Laserfiche Cloud.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("volumeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VolumeName { get; set; }

    }

    /// <summary>
    /// The request body containing fields that will be assigned to the entry.
    /// </summary>
    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutFieldValsRequest : SimpleImportMetadata
    {
        /// <summary>
        /// The links that will be assigned to the entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<LinkToUpdate> Links { get; set; }

    }

    /// <summary>
    /// A wrapper around the ODataValue with extra odata.nextLink and odata.count.
    /// </summary>
    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ODataValueContextOfListOfAttribute : ODataValueOfListOfAttribute
    {
        /// <summary>
        /// It contains a URL that allows retrieving the next subset of the requested collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("@odata.nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OdataNextLink { get; set; }

        /// <summary>
        /// It contains the count of a collection of entities or a collection of entity references.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("@odata.count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OdataCount { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ODataValueOfListOfAttribute
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<Attribute> Value { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Attribute
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WFieldInfo
    {
        /// <summary>
        /// The name of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The localized name of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The ID of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// The description of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The type of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WFieldType FieldType { get; set; }

        /// <summary>
        /// The length of the field for variable length data types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Length { get; set; }

        /// <summary>
        /// The default value of the field for new entries that are assigned<br/>
        /// to a template the represented field is a member of.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// A boolean indicating if the represented template field supports multiple values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isMultiValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsMultiValue { get; set; }

        /// <summary>
        /// A boolean indicating if the represented field must have a value set<br/>
        /// on entries assigned to a template that the field is a member of.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isRequired", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsRequired { get; set; }

        /// <summary>
        /// The constraint for values stored in the represented field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("constraint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Constraint { get; set; }

        /// <summary>
        /// The error string that will be returned when the field constraint<br/>
        /// is violated when setting a value for this field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("constraintError", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConstraintError { get; set; }

        /// <summary>
        /// The list of items assigned to the represented field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<string> ListValues { get; set; }

        /// <summary>
        /// The display format of the represented field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WFieldFormat Format { get; set; }

        /// <summary>
        /// The name of the currency that will be using when formatting<br/>
        /// the represented field when the Format property is set to the<br/>
        /// Currency member of the WFieldFormat enumeration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>
        /// The custom format pattern for fields that are configured to<br/>
        /// use a custom format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formatPattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormatPattern { get; set; }

    }

    /// <summary>
    /// Enumeration of Laserfiche template field types.
    /// </summary>
    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WFieldType
    {

        [EnumMember(Value = @"DateTime")]
        DateTime = 0,

        [EnumMember(Value = @"Blob")]
        Blob = 1,

        [EnumMember(Value = @"Date")]
        Date = 2,

        [EnumMember(Value = @"ShortInteger")]
        ShortInteger = 3,

        [EnumMember(Value = @"LongInteger")]
        LongInteger = 4,

        [EnumMember(Value = @"List")]
        List = 5,

        [EnumMember(Value = @"Number")]
        Number = 6,

        [EnumMember(Value = @"String")]
        String = 7,

        [EnumMember(Value = @"Time")]
        Time = 8,

    }

    /// <summary>
    /// Enumeration of Laserfiche template field formats.
    /// </summary>
    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WFieldFormat
    {

        [EnumMember(Value = @"None")]
        None = 0,

        [EnumMember(Value = @"ShortDate")]
        ShortDate = 1,

        [EnumMember(Value = @"LongDate")]
        LongDate = 2,

        [EnumMember(Value = @"ShortDateTime")]
        ShortDateTime = 3,

        [EnumMember(Value = @"LongDateTime")]
        LongDateTime = 4,

        [EnumMember(Value = @"ShortTime")]
        ShortTime = 5,

        [EnumMember(Value = @"LongTime")]
        LongTime = 6,

        [EnumMember(Value = @"GeneralNumber")]
        GeneralNumber = 7,

        [EnumMember(Value = @"Currency")]
        Currency = 8,

        [EnumMember(Value = @"Percent")]
        Percent = 9,

        [EnumMember(Value = @"Scientific")]
        Scientific = 10,

        [EnumMember(Value = @"Custom")]
        Custom = 11,

    }

    /// <summary>
    /// A wrapper around the ODataValue with extra odata.nextLink and odata.count.
    /// </summary>
    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ODataValueContextOfIListOfWFieldInfo : ODataValueOfIListOfWFieldInfo
    {
        /// <summary>
        /// It contains a URL that allows retrieving the next subset of the requested collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("@odata.nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OdataNextLink { get; set; }

        /// <summary>
        /// It contains the count of a collection of entities or a collection of entity references.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("@odata.count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OdataCount { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ODataValueOfIListOfWFieldInfo
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<WFieldInfo> Value { get; set; }

    }

    /// <summary>
    /// A wrapper around the ODataValue with extra odata.nextLink and odata.count.
    /// </summary>
    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ODataValueContextOfIListOfEntryLinkTypeInfo : ODataValueOfIListOfEntryLinkTypeInfo
    {
        /// <summary>
        /// It contains a URL that allows retrieving the next subset of the requested collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("@odata.nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OdataNextLink { get; set; }

        /// <summary>
        /// It contains the count of a collection of entities or a collection of entity references.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("@odata.count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OdataCount { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ODataValueOfIListOfEntryLinkTypeInfo
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<EntryLinkTypeInfo> Value { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EntryLinkTypeInfo
    {
        /// <summary>
        /// The ID of the entry link type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkTypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int LinkTypeId { get; set; }

        /// <summary>
        /// The label for the source entry in the link type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceLabel { get; set; }

        /// <summary>
        /// The label for the target entry in the link type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetLabel { get; set; }

        /// <summary>
        /// The description of the link type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkTypeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LinkTypeDescription { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public abstract partial class Entry
    {
        /// <summary>
        /// The ID of the entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// The name of the entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The ID of the parent entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParentId { get; set; }

        /// <summary>
        /// The full path in the Laserfiche repository to the entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullPath { get; set; }

        /// <summary>
        /// The path in the Laserfiche repository to the parent folder.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("folderPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FolderPath { get; set; }

        /// <summary>
        /// The name of the user that created this entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Creator { get; set; }

        /// <summary>
        /// The creation time of the entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creationTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateTimeOffset CreationTime { get; set; }

        /// <summary>
        /// The last modification time of the entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateTimeOffset LastModifiedTime { get; set; }

        /// <summary>
        /// The type of the entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entryType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntryType EntryType { get; set; }

        /// <summary>
        /// A boolean indicating if this entry is a container object; it can have other entries as children.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isContainer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsContainer { get; set; }

        /// <summary>
        /// A boolean indicating if this entry is a leaf object; it cannot have other entries as children.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLeaf", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLeaf { get; set; }

        /// <summary>
        /// The name of the template assigned to this entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templateName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TemplateName { get; set; }

        /// <summary>
        /// The id of the template assigned to this entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TemplateId { get; set; }

        /// <summary>
        /// The names of the fields assigned to the template assigned to this entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templateFieldNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<string> TemplateFieldNames { get; set; }

        /// <summary>
        /// The name of the volume that this entry is associated with.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("volumeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VolumeName { get; set; }

        /// <summary>
        /// Row number assigned to this entry in the listing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rowNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RowNumber { get; set; }

        /// <summary>
        /// The fields assigned to this entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<EntryFieldValue> Fields { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EntryType
    {

        [EnumMember(Value = @"Folder")]
        Folder = 0,

        [EnumMember(Value = @"RecordSeries")]
        RecordSeries = 1,

        [EnumMember(Value = @"Document")]
        Document = 2,

        [EnumMember(Value = @"Shortcut")]
        Shortcut = 3,

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EntryFieldValue
    {
        /// <summary>
        /// The name of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldName { get; set; }

        /// <summary>
        /// The values assigned to the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<IDictionary<string, object>> Values { get; set; }

        /// <summary>
        /// The type of the field. The possible field types are listed below.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WFieldType FieldType { get; set; }

        /// <summary>
        /// The ID of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FieldId { get; set; }

        /// <summary>
        /// A boolean indicating if the represented field supports multiple values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isMultiValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsMultiValue { get; set; }

        /// <summary>
        /// A boolean indicating if the represented field must have a value set on entries assigned to a template that the field is a member of.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isRequired", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsRequired { get; set; }

        /// <summary>
        /// A boolean indicating if there are more field values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMoreValues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasMoreValues { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecordSeries : Entry
    {

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Document : Entry
    {
        /// <summary>
        /// The size of the electronic document attached to the represented document,<br/>
        /// if there is one, in bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elecDocumentSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ElecDocumentSize { get; set; }

        /// <summary>
        /// The extension for the document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Extension { get; set; }

        /// <summary>
        /// A boolean indicating if there is an electronic document attached to the represented document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isElectronicDocument", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsElectronicDocument { get; set; }

        /// <summary>
        /// A boolean indicating if the represented document is a record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isRecord", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsRecord { get; set; }

        /// <summary>
        /// The MIME type of the electronic document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mimeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MimeType { get; set; }

        /// <summary>
        /// The page count of the represented document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PageCount { get; set; }

        /// <summary>
        /// A boolean indicating if the represented document is checked out.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isCheckedOut", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsCheckedOut { get; set; }

        /// <summary>
        /// A boolean indicating if the represented document is under version control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isUnderVersionControl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsUnderVersionControl { get; set; }

        /// <summary>
        /// The electronic document attached to the represented document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("edoc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Edoc Edoc { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Edoc
    {

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Shortcut : Entry
    {
        /// <summary>
        /// The entry ID of the shortcut target.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TargetId { get; set; }

        /// <summary>
        /// The extension of the shortcut target.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Extension { get; set; }

        /// <summary>
        /// The entry type of the shortcut target.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntryType TargetType { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Folder : Entry
    {
        /// <summary>
        /// A boolean indicating if the folder that this instance represents is known<br/>
        /// to be a record folder.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isRecordFolder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsRecordFolder { get; set; }

        /// <summary>
        /// A boolean indicating if the folder that this instance represents is known<br/>
        /// to directly or indirectly under a record series in the repository.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isUnderRecordSeries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsUnderRecordSeries { get; set; }

        /// <summary>
        /// The entries in this folder.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("children", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<Entry> Children { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FindEntryResult
    {
        /// <summary>
        /// The entry found by path. This property is set if entry is found.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Entry Entry { get; set; }

        /// <summary>
        /// The closest entry ancestor. This property is set if entry is not found and fallbackToClosestAncestor is set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ancestorEntry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Entry AncestorEntry { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AcceptedOperation
    {
        /// <summary>
        /// A token that can be used to check on the status of the operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeleteEntryWithAuditReason
    {
        /// <summary>
        /// The reason id for this audit event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auditReasonId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AuditReasonId { get; set; }

        /// <summary>
        /// The comment for this audit event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchEntryRequest
    {
        /// <summary>
        /// The ID of the parent entry that the entry will be moved to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParentId { get; set; }

        /// <summary>
        /// The name that will be assigned to the entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    /// <summary>
    /// A wrapper around the ODataValue with extra odata.nextLink and odata.count.
    /// </summary>
    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ODataValueContextOfIListOfEntry : ODataValueOfIListOfEntry
    {
        /// <summary>
        /// It contains a URL that allows retrieving the next subset of the requested collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("@odata.nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OdataNextLink { get; set; }

        /// <summary>
        /// It contains the count of a collection of entities or a collection of entity references.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("@odata.count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OdataCount { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ODataValueOfIListOfEntry
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<Entry> Value { get; set; }

    }

    /// <summary>
    /// A wrapper around the ODataValue with extra odata.nextLink and odata.count.
    /// </summary>
    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ODataValueContextOfIListOfFieldValue : ODataValueOfIListOfFieldValue
    {
        /// <summary>
        /// It contains a URL that allows retrieving the next subset of the requested collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("@odata.nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OdataNextLink { get; set; }

        /// <summary>
        /// It contains the count of a collection of entities or a collection of entity references.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("@odata.count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OdataCount { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ODataValueOfIListOfFieldValue
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<FieldValue> Value { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldValue : EntryFieldValue
    {
        /// <summary>
        /// The group id of the multi value field group. If the field is not a part of a multi value field group, then there is no group id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GroupId { get; set; }

    }

    /// <summary>
    /// A wrapper around the ODataValue with extra odata.nextLink and odata.count.
    /// </summary>
    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ODataValueContextOfIListOfWTagInfo : ODataValueOfIListOfWTagInfo
    {
        /// <summary>
        /// It contains a URL that allows retrieving the next subset of the requested collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("@odata.nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OdataNextLink { get; set; }

        /// <summary>
        /// It contains the count of a collection of entities or a collection of entity references.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("@odata.count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OdataCount { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ODataValueOfIListOfWTagInfo
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<WTagInfo> Value { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WTagInfo
    {
        /// <summary>
        /// The ID of the tag definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// The name of the tag definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The localized name of the tag definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The description of the tag definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// A boolean indicating whether or not the tag definition is classified<br/>
        /// as a security tag (true) or an informational tag (false).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSecure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSecure { get; set; }

        /// <summary>
        /// The watermark properties associated with the tag definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("watermark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Watermark Watermark { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Watermark
    {
        /// <summary>
        /// The watermark text associated with the tag defintion.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("watermarkText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WatermarkText { get; set; }

        /// <summary>
        /// The size of the watermark text, in points, associated with the tag definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("watermarkTextSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int WatermarkTextSize { get; set; }

        /// <summary>
        /// The position of the watermark on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("watermarkPosition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WatermarkPosition WatermarkPosition { get; set; }

        /// <summary>
        /// The rotation angle, in degrees, of the watermark associated with the tag definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("watermarkRotationAngle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int WatermarkRotationAngle { get; set; }

        /// <summary>
        /// A boolean indicating whether or not the watermark associated with the tag is mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isWatermarkMandatory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsWatermarkMandatory { get; set; }

        /// <summary>
        /// The intensity of the watermark associated with the tag definition. Valid value <br/>
        /// ranges from 0 to 100, with -1 as the default values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("watermarkIntensity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int WatermarkIntensity { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WatermarkPosition
    {

        [EnumMember(Value = @"TopLeft")]
        TopLeft = 0,

        [EnumMember(Value = @"TopCenter")]
        TopCenter = 1,

        [EnumMember(Value = @"TopRight")]
        TopRight = 2,

        [EnumMember(Value = @"MiddleLeft")]
        MiddleLeft = 3,

        [EnumMember(Value = @"DeadCenter")]
        DeadCenter = 4,

        [EnumMember(Value = @"MiddleRight")]
        MiddleRight = 5,

        [EnumMember(Value = @"BottomLeft")]
        BottomLeft = 6,

        [EnumMember(Value = @"BottomCenter")]
        BottomCenter = 7,

        [EnumMember(Value = @"BottomRight")]
        BottomRight = 8,

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutTagRequest
    {
        /// <summary>
        /// The tag names to assign to the entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<string> Tags { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ODataValueOfIListOfWEntryLinkInfo
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<WEntryLinkInfo> Value { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WEntryLinkInfo
    {
        /// <summary>
        /// The ID of the entry link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int LinkId { get; set; }

        /// <summary>
        /// The ID of the source entry of the represented link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SourceId { get; set; }

        /// <summary>
        /// The full path to the source entry of the represented link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceFullPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceFullPath { get; set; }

        /// <summary>
        /// The label for the source entry in the link type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceLabel { get; set; }

        /// <summary>
        /// The ID of the target entry of the represented link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TargetId { get; set; }

        /// <summary>
        /// The full path to the target entry of the represented link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetFullPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetFullPath { get; set; }

        /// <summary>
        /// The label for the target entry in the link type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetLabel { get; set; }

        /// <summary>
        /// The descriptive text for the represented entry link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The description of the link type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkTypeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LinkTypeDescription { get; set; }

        /// <summary>
        /// The ID of the entry link type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkTypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int LinkTypeId { get; set; }

        /// <summary>
        /// The properties for the entry link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IDictionary<string, string> LinkProperties { get; set; }

        /// <summary>
        /// The navigation link to the source entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceLink { get; set; }

        /// <summary>
        /// The navigation link to the target entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetLink { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutLinksRequest
    {
        /// <summary>
        /// The target entry ID to create a link to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TargetId { get; set; }

        /// <summary>
        /// The link type ID to create the link with.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkTypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int LinkTypeId { get; set; }

        /// <summary>
        /// Custom properties (key, value pairs) to be added to the link
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IDictionary<string, string> CustomProperties { get; set; }

    }

    /// <summary>
    /// A wrapper around the ODataValue with extra odata.nextLink and odata.count.
    /// </summary>
    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ODataValueContextOfIListOfWEntryLinkInfo : ODataValueOfIListOfWEntryLinkInfo
    {
        /// <summary>
        /// It contains a URL that allows retrieving the next subset of the requested collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("@odata.nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OdataNextLink { get; set; }

        /// <summary>
        /// It contains the count of a collection of entities or a collection of entity references.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("@odata.count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OdataCount { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostEntryChildrenRequest
    {
        /// <summary>
        /// The name of the entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The type of the entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PostEntryChildrenEntryType? EntryType { get; set; }

        /// <summary>
        /// The TargetId is only needed for creating a shortcut. This will be the entry ID of the shortcut target.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TargetId { get; set; }

        /// <summary>
        /// The SourceId is needed for some operations that require a source/destination. One example is the Copy operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SourceId { get; set; }

        /// <summary>
        /// The name of the volume to use. Will use the default parent entry volume if not specified. This is ignored in Laserfiche Cloud.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("volumeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VolumeName { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PostEntryChildrenEntryType
    {

        [EnumMember(Value = @"Folder")]
        Folder = 0,

        [EnumMember(Value = @"Shortcut")]
        Shortcut = 1,

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CopyAsyncRequest
    {
        /// <summary>
        /// The name of the entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The source entry Id to copy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SourceId { get; set; }

        /// <summary>
        /// The name of the volume to use. Will use the default parent entry volume if not specified. This is ignored in Laserfiche Cloud.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("volumeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VolumeName { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ODataValueOfBoolean
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Value { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetEdocWithAuditReasonRequest
    {
        /// <summary>
        /// The reason id for this audit event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auditReasonId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AuditReasonId { get; set; }

        /// <summary>
        /// The comment for this audit event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDynamicFieldLogicValueRequest
    {
        /// <summary>
        /// The template id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TemplateId { get; set; }

        /// <summary>
        /// The dynamic fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IDictionary<string, string> FieldValues { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutTemplateRequest
    {
        /// <summary>
        /// The template that will be assigned to the entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templateName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TemplateName { get; set; }

        /// <summary>
        /// The template fields that will be assigned to the entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IDictionary<string, FieldToUpdate> Fields { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RepositoryInfo
    {
        /// <summary>
        /// The repository id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepoId { get; set; }

        /// <summary>
        /// The repository name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repoName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepoName { get; set; }

        /// <summary>
        /// The corresponding repository WebClient url.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webclientUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebclientUrl { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuditReasons
    {
        /// <summary>
        /// The audit reasons associated with delete entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deleteEntry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<WAuditReason> DeleteEntry { get; set; }

        /// <summary>
        /// The audit reasons associated with export document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exportDocument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<WAuditReason> ExportDocument { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WAuditReason
    {
        /// <summary>
        /// The audit reason id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// The audit reason text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdvancedSearchRequest
    {
        /// <summary>
        /// Search command for advanced search
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchCommand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchCommand { get; set; }

        /// <summary>
        /// Fuzzy type (None, Percentage, or NumberOfLetters)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fuzzyType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FuzzyType FuzzyType { get; set; }

        /// <summary>
        /// Fuzzy factor (percentage as int or int value)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fuzzyFactor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FuzzyFactor { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FuzzyType
    {

        [EnumMember(Value = @"None")]
        None = 0,

        [EnumMember(Value = @"Percentage")]
        Percentage = 1,

        [EnumMember(Value = @"NumberOfLetters")]
        NumberOfLetters = 2,

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OperationProgress
    {
        /// <summary>
        /// The operation token of the operation associated with this OperationProgress.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OperationToken { get; set; }

        /// <summary>
        /// The type of the operation associated with this OperationProgress.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OperationType { get; set; }

        /// <summary>
        /// Determines what percentage of the execution of the associated operation is completed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("percentComplete", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PercentComplete { get; set; }

        /// <summary>
        /// The status of the operation associated with this OperationProgress.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OperationStatus Status { get; set; }

        /// <summary>
        /// The list of errors occurred during the execution of the associated operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<OperationErrorItem> Errors { get; set; }

        /// <summary>
        /// The URI which can be used (via api call) to access the result(s) of the associated operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("redirectUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RedirectUri { get; set; }

        /// <summary>
        /// The ID of the entry affected (e.g. created or modified) by the execution of the associated operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EntryId { get; set; }

        /// <summary>
        /// The timestamp representing when the associated operation's execution is started.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startTimestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateTimeOffset StartTimestamp { get; set; }

        /// <summary>
        /// The timestamp representing the last time when the associated task's status has changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusTimestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateTimeOffset StatusTimestamp { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OperationStatus
    {

        [EnumMember(Value = @"NotStarted")]
        NotStarted = 0,

        [EnumMember(Value = @"InProgress")]
        InProgress = 1,

        [EnumMember(Value = @"Completed")]
        Completed = 2,

        [EnumMember(Value = @"Failed")]
        Failed = 3,

        [EnumMember(Value = @"Cancelled")]
        Cancelled = 4,

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OperationErrorItem
    {
        /// <summary>
        /// The ID of the entry to which the error is related. 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ObjectId { get; set; }

        /// <summary>
        /// The short description of the error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }

    }

    /// <summary>
    /// A wrapper around the ODataValue with extra odata.nextLink and odata.count.
    /// </summary>
    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ODataValueContextOfIListOfContextHit : ODataValueOfIListOfContextHit
    {
        /// <summary>
        /// It contains a URL that allows retrieving the next subset of the requested collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("@odata.nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OdataNextLink { get; set; }

        /// <summary>
        /// It contains the count of a collection of entities or a collection of entity references.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("@odata.count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OdataCount { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ODataValueOfIListOfContextHit
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<ContextHit> Value { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContextHit
    {
        [Newtonsoft.Json.JsonProperty("hitType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HitType HitType { get; set; }

        /// <summary>
        /// A boolean indicating if this context hit occurs on an annotation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAnnotationHit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsAnnotationHit { get; set; }

        /// <summary>
        /// The ID of the annotation that the context hit is in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("annotationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AnnotationId { get; set; }

        /// <summary>
        /// The page number in the document of the search hit's context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PageNumber { get; set; }

        /// <summary>
        /// The offset from the beginning of the page of the starting character of the search hit's context line.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pageOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PageOffset { get; set; }

        /// <summary>
        /// The line of context for the search hit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("context", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }

        /// <summary>
        /// The character offset from the beginning of the context line of the start of the first highlight.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("highlight1Offset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Highlight1Offset { get; set; }

        /// <summary>
        /// The length of the first highlight in characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("highlight1Length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Highlight1Length { get; set; }

        /// <summary>
        /// The character offset from the beginning of the context line of the start of the second highlight.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("highlight2Offset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Highlight2Offset { get; set; }

        /// <summary>
        /// The length of the second highlight in characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("highlight2Length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Highlight2Length { get; set; }

        /// <summary>
        /// The number of words in the context hit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hitWidth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int HitWidth { get; set; }

        /// <summary>
        /// The number of hits in the electronic document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("edocHitCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EdocHitCount { get; set; }

        /// <summary>
        /// The number of hits in the template.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldHitCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FieldHitCount { get; set; }

        /// <summary>
        /// The name of a template field containing the hit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldName { get; set; }

        /// <summary>
        /// The hit number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hitNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int HitNumber { get; set; }

    }

    /// <summary>
    /// The type of context hit.
    /// </summary>
    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HitType
    {

        [EnumMember(Value = @"PageContent")]
        PageContent = 0,

        [EnumMember(Value = @"Note")]
        Note = 1,

        [EnumMember(Value = @"Callout")]
        Callout = 2,

        [EnumMember(Value = @"TextBox")]
        TextBox = 3,

        [EnumMember(Value = @"Edoc")]
        Edoc = 4,

        [EnumMember(Value = @"Prop")]
        Prop = 5,

        [EnumMember(Value = @"Name")]
        Name = 6,

        [EnumMember(Value = @"Extension")]
        Extension = 7,

        [EnumMember(Value = @"VersionGroupNote")]
        VersionGroupNote = 8,

        [EnumMember(Value = @"VersionComment")]
        VersionComment = 9,

        [EnumMember(Value = @"Field")]
        Field = 10,

        [EnumMember(Value = @"SignatureComment")]
        SignatureComment = 11,

        [EnumMember(Value = @"CertificateSubject")]
        CertificateSubject = 12,

        [EnumMember(Value = @"TagComment")]
        TagComment = 13,

        [EnumMember(Value = @"AnnotationComment")]
        AnnotationComment = 14,

        [EnumMember(Value = @"Attachment")]
        Attachment = 15,

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SimpleSearchRequest
    {
        /// <summary>
        /// Search command for simple search
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchCommand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchCommand { get; set; }

    }

    /// <summary>
    /// A wrapper around the ODataValue with extra odata.nextLink and odata.count.
    /// </summary>
    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ODataValueContextOfIListOfWTemplateInfo : ODataValueOfIListOfWTemplateInfo
    {
        /// <summary>
        /// It contains a URL that allows retrieving the next subset of the requested collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("@odata.nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OdataNextLink { get; set; }

        /// <summary>
        /// It contains the count of a collection of entities or a collection of entity references.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("@odata.count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OdataCount { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ODataValueOfIListOfWTemplateInfo
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<WTemplateInfo> Value { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WTemplateInfo
    {
        /// <summary>
        /// The ID of the template definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// The name of the template definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The localized name of the template definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The description of the template definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The color assigned to the template definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LFColor Color { get; set; }

        /// <summary>
        /// The number of fields assigned to the template.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FieldCount { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LFColor
    {
        [Newtonsoft.Json.JsonProperty("a", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte A { get; set; }

        [Newtonsoft.Json.JsonProperty("r", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte R { get; set; }

        [Newtonsoft.Json.JsonProperty("g", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte G { get; set; }

        [Newtonsoft.Json.JsonProperty("b", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte B { get; set; }

    }

    /// <summary>
    /// A wrapper around the ODataValue with extra odata.nextLink and odata.count.
    /// </summary>
    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ODataValueContextOfIListOfTemplateFieldInfo : ODataValueOfIListOfTemplateFieldInfo
    {
        /// <summary>
        /// It contains a URL that allows retrieving the next subset of the requested collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("@odata.nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OdataNextLink { get; set; }

        /// <summary>
        /// It contains the count of a collection of entities or a collection of entity references.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("@odata.count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OdataCount { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ODataValueOfIListOfTemplateFieldInfo
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<TemplateFieldInfo> Value { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemplateFieldInfo : WFieldInfo
    {
        /// <summary>
        /// A form logic rule associated with a Laserfiche template and field definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Rule Rule { get; set; }

        /// <summary>
        /// The group id of the field in the template.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int GroupId { get; set; }

        /// <summary>
        /// The name of field group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupName { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rule
    {
        /// <summary>
        /// The IDs of the parent fields in the template according to the<br/>
        /// form logic rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ancestors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<int> Ancestors { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ODataValueOfDateTime
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateTimeOffset Value { get; set; }

    }

    [GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SimpleImportMetadata
    {
        /// <summary>
        /// The fields that will be assigned to the entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IDictionary<string, FieldToUpdate> Fields { get; set; }

        /// <summary>
        /// The tags that will be assigned to the entry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICollection<string> Tags { get; set; }

    }

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(Stream data, string fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : IDisposable
    {
        private IDisposable _client;
        private IDisposable _response;

        public int StatusCode { get; private set; }

        public IReadOnlyDictionary<string, IEnumerable<string>> Headers { get; private set; }

        public Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, IReadOnlyDictionary<string, IEnumerable<string>> headers, Stream stream, IDisposable client, IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HttpResponseHead
    {
        public int StatusCode { get; private set; }

        public IReadOnlyDictionary<string, IEnumerable<string>> Headers { get; private set; }

        public HttpResponseHead(int statusCode, IReadOnlyDictionary<string, IEnumerable<string>> headers)
        {
            StatusCode = statusCode;
            Headers = headers;
        }
    }

    [GeneratedCode("NSwag", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HttpResponseHead<TResult> : HttpResponseHead
    {
        public TResult Result { get; private set; }

        public HttpResponseHead(int statusCode, IReadOnlyDictionary<string, IEnumerable<string>> headers, TResult result)
            : base(statusCode, headers)
        {
            Result = result;
        }
    }



}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603

